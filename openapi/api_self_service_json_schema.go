/*
SelfService API

SelfService API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SelfServiceJsonSchemaAPIService SelfServiceJsonSchemaAPI service
type SelfServiceJsonSchemaAPIService service

type ApiJsonSchemaIdGetRequest struct {
	ctx context.Context
	ApiService *SelfServiceJsonSchemaAPIService
	id string
	schemaVersion *int32
}

func (r ApiJsonSchemaIdGetRequest) SchemaVersion(schemaVersion int32) ApiJsonSchemaIdGetRequest {
	r.schemaVersion = &schemaVersion
	return r
}

func (r ApiJsonSchemaIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.JsonSchemaIdGetExecute(r)
}

/*
JsonSchemaIdGet Method for JsonSchemaIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiJsonSchemaIdGetRequest
*/
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaIdGet(ctx context.Context, id string) ApiJsonSchemaIdGetRequest {
	return ApiJsonSchemaIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaIdGetExecute(r ApiJsonSchemaIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelfServiceJsonSchemaAPIService.JsonSchemaIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-schema/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.schemaVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schemaVersion", r.schemaVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiJsonSchemaIdPostRequest struct {
	ctx context.Context
	ApiService *SelfServiceJsonSchemaAPIService
	id string
	addSelfServiceJsonSchemaRequest *AddSelfServiceJsonSchemaRequest
}

func (r ApiJsonSchemaIdPostRequest) AddSelfServiceJsonSchemaRequest(addSelfServiceJsonSchemaRequest AddSelfServiceJsonSchemaRequest) ApiJsonSchemaIdPostRequest {
	r.addSelfServiceJsonSchemaRequest = &addSelfServiceJsonSchemaRequest
	return r
}

func (r ApiJsonSchemaIdPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.JsonSchemaIdPostExecute(r)
}

/*
JsonSchemaIdPost Method for JsonSchemaIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiJsonSchemaIdPostRequest
*/
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaIdPost(ctx context.Context, id string) ApiJsonSchemaIdPostRequest {
	return ApiJsonSchemaIdPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaIdPostExecute(r ApiJsonSchemaIdPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelfServiceJsonSchemaAPIService.JsonSchemaIdPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-schema/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addSelfServiceJsonSchemaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiJsonSchemaValidatePostRequest struct {
	ctx context.Context
	ApiService *SelfServiceJsonSchemaAPIService
	validateSelfServiceJsonSchemaRequest *ValidateSelfServiceJsonSchemaRequest
}

func (r ApiJsonSchemaValidatePostRequest) ValidateSelfServiceJsonSchemaRequest(validateSelfServiceJsonSchemaRequest ValidateSelfServiceJsonSchemaRequest) ApiJsonSchemaValidatePostRequest {
	r.validateSelfServiceJsonSchemaRequest = &validateSelfServiceJsonSchemaRequest
	return r
}

func (r ApiJsonSchemaValidatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.JsonSchemaValidatePostExecute(r)
}

/*
JsonSchemaValidatePost Method for JsonSchemaValidatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJsonSchemaValidatePostRequest
*/
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaValidatePost(ctx context.Context) ApiJsonSchemaValidatePostRequest {
	return ApiJsonSchemaValidatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SelfServiceJsonSchemaAPIService) JsonSchemaValidatePostExecute(r ApiJsonSchemaValidatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelfServiceJsonSchemaAPIService.JsonSchemaValidatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-schema/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.validateSelfServiceJsonSchemaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

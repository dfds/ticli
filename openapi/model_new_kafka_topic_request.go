/*
SelfService API

SelfService API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NewKafkaTopicRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewKafkaTopicRequest{}

// NewKafkaTopicRequest struct for NewKafkaTopicRequest
type NewKafkaTopicRequest struct {
	KafkaClusterId string `json:"kafkaClusterId"`
	Name string `json:"name"`
	Description string `json:"description"`
	Partitions int32 `json:"partitions"`
	Retention string `json:"retention"`
}

type _NewKafkaTopicRequest NewKafkaTopicRequest

// NewNewKafkaTopicRequest instantiates a new NewKafkaTopicRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewKafkaTopicRequest(kafkaClusterId string, name string, description string, partitions int32, retention string) *NewKafkaTopicRequest {
	this := NewKafkaTopicRequest{}
	this.KafkaClusterId = kafkaClusterId
	this.Name = name
	this.Description = description
	this.Partitions = partitions
	this.Retention = retention
	return &this
}

// NewNewKafkaTopicRequestWithDefaults instantiates a new NewKafkaTopicRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewKafkaTopicRequestWithDefaults() *NewKafkaTopicRequest {
	this := NewKafkaTopicRequest{}
	return &this
}

// GetKafkaClusterId returns the KafkaClusterId field value
func (o *NewKafkaTopicRequest) GetKafkaClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KafkaClusterId
}

// GetKafkaClusterIdOk returns a tuple with the KafkaClusterId field value
// and a boolean to check if the value has been set.
func (o *NewKafkaTopicRequest) GetKafkaClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KafkaClusterId, true
}

// SetKafkaClusterId sets field value
func (o *NewKafkaTopicRequest) SetKafkaClusterId(v string) {
	o.KafkaClusterId = v
}

// GetName returns the Name field value
func (o *NewKafkaTopicRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewKafkaTopicRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewKafkaTopicRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *NewKafkaTopicRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NewKafkaTopicRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NewKafkaTopicRequest) SetDescription(v string) {
	o.Description = v
}

// GetPartitions returns the Partitions field value
func (o *NewKafkaTopicRequest) GetPartitions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value
// and a boolean to check if the value has been set.
func (o *NewKafkaTopicRequest) GetPartitionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partitions, true
}

// SetPartitions sets field value
func (o *NewKafkaTopicRequest) SetPartitions(v int32) {
	o.Partitions = v
}

// GetRetention returns the Retention field value
func (o *NewKafkaTopicRequest) GetRetention() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *NewKafkaTopicRequest) GetRetentionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *NewKafkaTopicRequest) SetRetention(v string) {
	o.Retention = v
}

func (o NewKafkaTopicRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewKafkaTopicRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kafkaClusterId"] = o.KafkaClusterId
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["partitions"] = o.Partitions
	toSerialize["retention"] = o.Retention
	return toSerialize, nil
}

func (o *NewKafkaTopicRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kafkaClusterId",
		"name",
		"description",
		"partitions",
		"retention",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewKafkaTopicRequest := _NewKafkaTopicRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewKafkaTopicRequest)

	if err != nil {
		return err
	}

	*o = NewKafkaTopicRequest(varNewKafkaTopicRequest)

	return err
}

type NullableNewKafkaTopicRequest struct {
	value *NewKafkaTopicRequest
	isSet bool
}

func (v NullableNewKafkaTopicRequest) Get() *NewKafkaTopicRequest {
	return v.value
}

func (v *NullableNewKafkaTopicRequest) Set(val *NewKafkaTopicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewKafkaTopicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewKafkaTopicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewKafkaTopicRequest(val *NewKafkaTopicRequest) *NullableNewKafkaTopicRequest {
	return &NullableNewKafkaTopicRequest{value: val, isSet: true}
}

func (v NullableNewKafkaTopicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewKafkaTopicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



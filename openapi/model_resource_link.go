/*
SelfService API

SelfService API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceLink{}

// ResourceLink struct for ResourceLink
type ResourceLink struct {
	Href NullableString `json:"href,omitempty"`
	Rel NullableString `json:"rel,omitempty"`
	Allow []string `json:"allow,omitempty"`
}

// NewResourceLink instantiates a new ResourceLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceLink() *ResourceLink {
	this := ResourceLink{}
	return &this
}

// NewResourceLinkWithDefaults instantiates a new ResourceLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceLinkWithDefaults() *ResourceLink {
	this := ResourceLink{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceLink) GetHref() string {
	if o == nil || IsNil(o.Href.Get()) {
		var ret string
		return ret
	}
	return *o.Href.Get()
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceLink) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Href.Get(), o.Href.IsSet()
}

// HasHref returns a boolean if a field has been set.
func (o *ResourceLink) HasHref() bool {
	if o != nil && o.Href.IsSet() {
		return true
	}

	return false
}

// SetHref gets a reference to the given NullableString and assigns it to the Href field.
func (o *ResourceLink) SetHref(v string) {
	o.Href.Set(&v)
}
// SetHrefNil sets the value for Href to be an explicit nil
func (o *ResourceLink) SetHrefNil() {
	o.Href.Set(nil)
}

// UnsetHref ensures that no value is present for Href, not even an explicit nil
func (o *ResourceLink) UnsetHref() {
	o.Href.Unset()
}

// GetRel returns the Rel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceLink) GetRel() string {
	if o == nil || IsNil(o.Rel.Get()) {
		var ret string
		return ret
	}
	return *o.Rel.Get()
}

// GetRelOk returns a tuple with the Rel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceLink) GetRelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rel.Get(), o.Rel.IsSet()
}

// HasRel returns a boolean if a field has been set.
func (o *ResourceLink) HasRel() bool {
	if o != nil && o.Rel.IsSet() {
		return true
	}

	return false
}

// SetRel gets a reference to the given NullableString and assigns it to the Rel field.
func (o *ResourceLink) SetRel(v string) {
	o.Rel.Set(&v)
}
// SetRelNil sets the value for Rel to be an explicit nil
func (o *ResourceLink) SetRelNil() {
	o.Rel.Set(nil)
}

// UnsetRel ensures that no value is present for Rel, not even an explicit nil
func (o *ResourceLink) UnsetRel() {
	o.Rel.Unset()
}

// GetAllow returns the Allow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceLink) GetAllow() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceLink) GetAllowOk() ([]string, bool) {
	if o == nil || IsNil(o.Allow) {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *ResourceLink) HasAllow() bool {
	if o != nil && !IsNil(o.Allow) {
		return true
	}

	return false
}

// SetAllow gets a reference to the given []string and assigns it to the Allow field.
func (o *ResourceLink) SetAllow(v []string) {
	o.Allow = v
}

func (o ResourceLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Href.IsSet() {
		toSerialize["href"] = o.Href.Get()
	}
	if o.Rel.IsSet() {
		toSerialize["rel"] = o.Rel.Get()
	}
	if o.Allow != nil {
		toSerialize["allow"] = o.Allow
	}
	return toSerialize, nil
}

type NullableResourceLink struct {
	value *ResourceLink
	isSet bool
}

func (v NullableResourceLink) Get() *ResourceLink {
	return v.value
}

func (v *NullableResourceLink) Set(val *ResourceLink) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceLink) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceLink(val *ResourceLink) *NullableResourceLink {
	return &NullableResourceLink{value: val, isSet: true}
}

func (v NullableResourceLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
SelfService API

Testing TeamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TeamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TeamAPIService TeamsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TeamAPI.TeamsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdCapabilityLinksCapabilityIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var capabilityId string

		httpRes, err := apiClient.TeamAPI.TeamsIdCapabilityLinksCapabilityIdDelete(context.Background(), id, capabilityId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdCapabilityLinksCapabilityIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var capabilityId string

		httpRes, err := apiClient.TeamAPI.TeamsIdCapabilityLinksCapabilityIdPost(context.Background(), id, capabilityId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdCapabilityLinksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.TeamAPI.TeamsIdCapabilityLinksGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.TeamAPI.TeamsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.TeamAPI.TeamsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsIdMembersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.TeamAPI.TeamsIdMembersGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamAPIService TeamsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TeamAPI.TeamsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
SelfService API

Testing KafkaTopicAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_KafkaTopicAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KafkaTopicAPIService KafkatopicsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdConsumersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdConsumersGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdDescriptionPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdDescriptionPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdMessagecontractsContractIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var contractId string

		httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdMessagecontractsContractIdGet(context.Background(), id, contractId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdMessagecontractsContractIdRetryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var contractId string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdMessagecontractsContractIdRetryPost(context.Background(), id, contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdMessagecontractsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdMessagecontractsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdMessagecontractsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdMessagecontractsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KafkaTopicAPIService KafkatopicsIdMessagecontractsValidatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KafkaTopicAPI.KafkatopicsIdMessagecontractsValidatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

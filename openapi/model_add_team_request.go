/*
SelfService API

SelfService API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddTeamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTeamRequest{}

// AddTeamRequest struct for AddTeamRequest
type AddTeamRequest struct {
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	LinkedCapabilityIds []string `json:"linkedCapabilityIds,omitempty"`
}

// NewAddTeamRequest instantiates a new AddTeamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTeamRequest() *AddTeamRequest {
	this := AddTeamRequest{}
	return &this
}

// NewAddTeamRequestWithDefaults instantiates a new AddTeamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTeamRequestWithDefaults() *AddTeamRequest {
	this := AddTeamRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddTeamRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddTeamRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AddTeamRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AddTeamRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AddTeamRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AddTeamRequest) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddTeamRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddTeamRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AddTeamRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AddTeamRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AddTeamRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AddTeamRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetLinkedCapabilityIds returns the LinkedCapabilityIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddTeamRequest) GetLinkedCapabilityIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.LinkedCapabilityIds
}

// GetLinkedCapabilityIdsOk returns a tuple with the LinkedCapabilityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddTeamRequest) GetLinkedCapabilityIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LinkedCapabilityIds) {
		return nil, false
	}
	return o.LinkedCapabilityIds, true
}

// HasLinkedCapabilityIds returns a boolean if a field has been set.
func (o *AddTeamRequest) HasLinkedCapabilityIds() bool {
	if o != nil && !IsNil(o.LinkedCapabilityIds) {
		return true
	}

	return false
}

// SetLinkedCapabilityIds gets a reference to the given []string and assigns it to the LinkedCapabilityIds field.
func (o *AddTeamRequest) SetLinkedCapabilityIds(v []string) {
	o.LinkedCapabilityIds = v
}

func (o AddTeamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTeamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.LinkedCapabilityIds != nil {
		toSerialize["linkedCapabilityIds"] = o.LinkedCapabilityIds
	}
	return toSerialize, nil
}

type NullableAddTeamRequest struct {
	value *AddTeamRequest
	isSet bool
}

func (v NullableAddTeamRequest) Get() *AddTeamRequest {
	return v.value
}

func (v *NullableAddTeamRequest) Set(val *AddTeamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTeamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTeamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTeamRequest(val *AddTeamRequest) *NullableAddTeamRequest {
	return &NullableAddTeamRequest{value: val, isSet: true}
}

func (v NullableAddTeamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTeamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



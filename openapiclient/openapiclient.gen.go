// Package openapiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// AddSelfServiceJsonSchemaRequest defines model for AddSelfServiceJsonSchemaRequest.
type AddSelfServiceJsonSchemaRequest struct {
	Schema map[string]JsonNode `json:"schema"`
}

// AddTeamRequest defines model for AddTeamRequest.
type AddTeamRequest struct {
	Description         *string   `json:"description"`
	LinkedCapabilityIds *[]string `json:"linkedCapabilityIds"`
	Name                *string   `json:"name"`
}

// AwsAccountApiResource defines model for AwsAccountApiResource.
type AwsAccountApiResource struct {
	Links     *AwsAccountLinks `json:"_links,omitempty"`
	AccountId *string          `json:"accountId"`
	Id        *string          `json:"id"`
	Namespace *string          `json:"namespace"`
	RoleEmail *string          `json:"roleEmail"`
	Status    *string          `json:"status"`
}

// AwsAccountLinks defines model for AwsAccountLinks.
type AwsAccountLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// CapabilityDetailsApiResource defines model for CapabilityDetailsApiResource.
type CapabilityDetailsApiResource struct {
	Links                     *CapabilityDetailsLinks `json:"_links,omitempty"`
	CreatedAt                 *time.Time              `json:"createdAt,omitempty"`
	CreatedBy                 *string                 `json:"createdBy"`
	Description               *string                 `json:"description"`
	Id                        *string                 `json:"id"`
	JsonMetadata              *string                 `json:"jsonMetadata"`
	JsonMetadataSchemaVersion *int32                  `json:"jsonMetadataSchemaVersion,omitempty"`
	Name                      *string                 `json:"name"`
	Status                    *string                 `json:"status"`
}

// CapabilityDetailsLinks defines model for CapabilityDetailsLinks.
type CapabilityDetailsLinks struct {
	AwsAccount                      *ResourceLink `json:"awsAccount,omitempty"`
	CancelCapabilityDeletionRequest *ResourceLink `json:"cancelCapabilityDeletionRequest,omitempty"`
	Clusters                        *ResourceLink `json:"clusters,omitempty"`
	ConfigurationLevel              *ResourceLink `json:"configurationLevel,omitempty"`
	GetLinkedTeams                  *ResourceLink `json:"getLinkedTeams,omitempty"`
	JoinCapability                  *ResourceLink `json:"joinCapability,omitempty"`
	LeaveCapability                 *ResourceLink `json:"leaveCapability,omitempty"`
	Members                         *ResourceLink `json:"members,omitempty"`
	MembershipApplications          *ResourceLink `json:"membershipApplications,omitempty"`
	Metadata                        *ResourceLink `json:"metadata,omitempty"`
	RequestCapabilityDeletion       *ResourceLink `json:"requestCapabilityDeletion,omitempty"`
	Self                            *ResourceLink `json:"self,omitempty"`
	SendInvitations                 *ResourceLink `json:"sendInvitations,omitempty"`
	SetRequiredMetadata             *ResourceLink `json:"setRequiredMetadata,omitempty"`
}

// CapabilityListApiResource defines model for CapabilityListApiResource.
type CapabilityListApiResource struct {
	Links *CapabilityListLinks             `json:"_links,omitempty"`
	Items *[]CapabilityListItemApiResource `json:"items"`
}

// CapabilityListItemApiResource defines model for CapabilityListItemApiResource.
type CapabilityListItemApiResource struct {
	Links        *CapabilityListItemLinks `json:"_links,omitempty"`
	AwsAccountId *string                  `json:"awsAccountId"`
	CreatedAt    *time.Time               `json:"createdAt,omitempty"`
	CreatedBy    *string                  `json:"createdBy"`
	Description  *string                  `json:"description"`
	Id           *string                  `json:"id"`
	JsonMetadata *string                  `json:"jsonMetadata"`
	Name         *string                  `json:"name"`
	Status       *string                  `json:"status"`
}

// CapabilityListItemLinks defines model for CapabilityListItemLinks.
type CapabilityListItemLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// CapabilityListLinks defines model for CapabilityListLinks.
type CapabilityListLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// CapabilityMembersApiResource defines model for CapabilityMembersApiResource.
type CapabilityMembersApiResource struct {
	Links *CapabilityMembersLinks `json:"_links,omitempty"`
	Items *[]MemberApiResource    `json:"items"`
}

// CapabilityMembersLinks defines model for CapabilityMembersLinks.
type CapabilityMembersLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// ChangeKafkaTopicDescriptionRequest defines model for ChangeKafkaTopicDescriptionRequest.
type ChangeKafkaTopicDescriptionRequest struct {
	Description *string `json:"description"`
}

// ECRRepository defines model for ECRRepository.
type ECRRepository struct {
	CreatedBy   *string          `json:"createdBy"`
	Description *string          `json:"description"`
	Id          *ECRRepositoryId `json:"id,omitempty"`
	Name        *string          `json:"name"`
	RequestedAt *time.Time       `json:"requestedAt"`
}

// ECRRepositoryId defines model for ECRRepositoryId.
type ECRRepositoryId = map[string]interface{}

// InvitationsRequest defines model for InvitationsRequest.
type InvitationsRequest struct {
	Invitees []string `json:"invitees"`
}

// JsonNode defines model for JsonNode.
type JsonNode struct {
	Options *JsonNodeOptions `json:"options,omitempty"`
	Parent  *JsonNode        `json:"parent,omitempty"`
	Root    *JsonNode        `json:"root,omitempty"`
}

// JsonNodeOptions defines model for JsonNodeOptions.
type JsonNodeOptions struct {
	PropertyNameCaseInsensitive *bool `json:"propertyNameCaseInsensitive,omitempty"`
}

// KafkaClusterApiResource defines model for KafkaClusterApiResource.
type KafkaClusterApiResource struct {
	Links       *KafkaClusterLinks `json:"_links,omitempty"`
	Description *string            `json:"description"`
	Id          *string            `json:"id"`
	Name        *string            `json:"name"`
}

// KafkaClusterLinks defines model for KafkaClusterLinks.
type KafkaClusterLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// KafkaClusterListApiResource defines model for KafkaClusterListApiResource.
type KafkaClusterListApiResource struct {
	Links *KafkaClusterListLinks     `json:"_links,omitempty"`
	Items *[]KafkaClusterApiResource `json:"items"`
}

// KafkaClusterListLinks defines model for KafkaClusterListLinks.
type KafkaClusterListLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// KafkaTopicApiResource defines model for KafkaTopicApiResource.
type KafkaTopicApiResource struct {
	Links          *KafkaTopicLinks `json:"_links,omitempty"`
	CapabilityId   *string          `json:"capabilityId"`
	Description    *string          `json:"description"`
	Id             *string          `json:"id"`
	KafkaClusterId *string          `json:"kafkaClusterId"`
	Name           *string          `json:"name"`
	Partitions     *int32           `json:"partitions,omitempty"`
	Retention      *string          `json:"retention"`
	Status         *string          `json:"status"`
}

// KafkaTopicLinks defines model for KafkaTopicLinks.
type KafkaTopicLinks struct {
	Consumers         *ResourceLink       `json:"consumers,omitempty"`
	MessageContracts  *ResourceLink       `json:"messageContracts,omitempty"`
	Self              *ResourceLink       `json:"self,omitempty"`
	UpdateDescription *ResourceActionLink `json:"updateDescription,omitempty"`
}

// KafkaTopicListApiResource defines model for KafkaTopicListApiResource.
type KafkaTopicListApiResource struct {
	Embedded *KafkaTopicListEmbeddedResources `json:"_embedded,omitempty"`
	Links    *KafkaTopicListLinks             `json:"_links,omitempty"`
	Items    *[]KafkaTopicApiResource         `json:"items"`
}

// KafkaTopicListEmbeddedResources defines model for KafkaTopicListEmbeddedResources.
type KafkaTopicListEmbeddedResources struct {
	KafkaClusters *KafkaClusterListApiResource `json:"kafkaClusters,omitempty"`
}

// KafkaTopicListLinks defines model for KafkaTopicListLinks.
type KafkaTopicListLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// MemberApiResource defines model for MemberApiResource.
type MemberApiResource struct {
	Email *string `json:"email"`
	Id    *string `json:"id"`
	Name  *string `json:"name"`
}

// MembershipApplicationApiResource defines model for MembershipApplicationApiResource.
type MembershipApplicationApiResource struct {
	Links       *MembershipApplicationLinks        `json:"_links,omitempty"`
	Applicant   *string                            `json:"applicant"`
	Approvals   *MembershipApprovalListApiResource `json:"approvals,omitempty"`
	ExpiresOn   *string                            `json:"expiresOn"`
	Id          *string                            `json:"id"`
	SubmittedAt *string                            `json:"submittedAt"`
}

// MembershipApplicationLinks defines model for MembershipApplicationLinks.
type MembershipApplicationLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// MembershipApplicationListApiResource defines model for MembershipApplicationListApiResource.
type MembershipApplicationListApiResource struct {
	Links *MembershipApplicationListLinks     `json:"_links,omitempty"`
	Items *[]MembershipApplicationApiResource `json:"items"`
}

// MembershipApplicationListLinks defines model for MembershipApplicationListLinks.
type MembershipApplicationListLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// MembershipApprovalApiResource defines model for MembershipApprovalApiResource.
type MembershipApprovalApiResource struct {
	ApprovedAt *string `json:"approvedAt"`
	ApprovedBy *string `json:"approvedBy"`
	Id         *string `json:"id"`
}

// MembershipApprovalListApiResource defines model for MembershipApprovalListApiResource.
type MembershipApprovalListApiResource struct {
	Links *MembershipApprovalListLinks     `json:"_links,omitempty"`
	Items *[]MembershipApprovalApiResource `json:"items"`
}

// MembershipApprovalListLinks defines model for MembershipApprovalListLinks.
type MembershipApprovalListLinks struct {
	Self *ResourceLink `json:"self,omitempty"`
}

// NewCapabilityRequest defines model for NewCapabilityRequest.
type NewCapabilityRequest struct {
	Description  *string   `json:"description"`
	Invitees     *[]string `json:"invitees"`
	JsonMetadata *string   `json:"jsonMetadata"`
	Name         string    `json:"name"`
}

// NewECRRepositoryRequest defines model for NewECRRepositoryRequest.
type NewECRRepositoryRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// NewKafkaTopicRequest defines model for NewKafkaTopicRequest.
type NewKafkaTopicRequest struct {
	Description    string `json:"description"`
	KafkaClusterId string `json:"kafkaClusterId"`
	Name           string `json:"name"`
	Partitions     int32  `json:"partitions"`
	Retention      string `json:"retention"`
}

// NewMessageContractRequest defines model for NewMessageContractRequest.
type NewMessageContractRequest struct {
	Description string `json:"description"`
	Example     string `json:"example"`
	MessageType string `json:"messageType"`
	Schema      string `json:"schema"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               *string                `json:"detail"`
	Instance             *string                `json:"instance"`
	Status               *int32                 `json:"status"`
	Title                *string                `json:"title"`
	Type                 *string                `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ResourceActionLink defines model for ResourceActionLink.
type ResourceActionLink struct {
	Href   *string `json:"href"`
	Method *string `json:"method"`
}

// ResourceLink defines model for ResourceLink.
type ResourceLink struct {
	Allow *[]string `json:"allow"`
	Href  *string   `json:"href"`
	Rel   *string   `json:"rel"`
}

// SetCapabilityMetadataRequest defines model for SetCapabilityMetadataRequest.
type SetCapabilityMetadataRequest struct {
	JsonMetadata map[string]JsonNode `json:"jsonMetadata"`
}

// UpdatePersonalInformationRequest defines model for UpdatePersonalInformationRequest.
type UpdatePersonalInformationRequest struct {
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

// UserId defines model for UserId.
type UserId = map[string]interface{}

// ValidateMessageContractRequest defines model for ValidateMessageContractRequest.
type ValidateMessageContractRequest struct {
	MessageType string `json:"messageType"`
	Schema      string `json:"schema"`
}

// ValidateSelfServiceJsonSchemaRequest defines model for ValidateSelfServiceJsonSchemaRequest.
type ValidateSelfServiceJsonSchemaRequest struct {
	Schema map[string]JsonNode `json:"schema"`
}

// PostCapabilitiesIdRequestdeletionParams defines parameters for PostCapabilitiesIdRequestdeletion.
type PostCapabilitiesIdRequestdeletionParams struct {
	User *UserId `form:"user,omitempty" json:"user,omitempty"`
}

// PostEcrSynchronizeParams defines parameters for PostEcrSynchronize.
type PostEcrSynchronizeParams struct {
	UpdateOnMismatch *bool `form:"updateOnMismatch,omitempty" json:"updateOnMismatch,omitempty"`
}

// GetInvitationsParams defines parameters for GetInvitations.
type GetInvitationsParams struct {
	TargetType *string `form:"targetType,omitempty" json:"targetType,omitempty"`
}

// GetJsonSchemaIdParams defines parameters for GetJsonSchemaId.
type GetJsonSchemaIdParams struct {
	SchemaVersion *int32 `form:"schemaVersion,omitempty" json:"schemaVersion,omitempty"`
}

// GetKafkatopicsParams defines parameters for GetKafkatopics.
type GetKafkatopicsParams struct {
	CapabilityId   *string `form:"CapabilityId,omitempty" json:"CapabilityId,omitempty"`
	ClusterId      *string `form:"ClusterId,omitempty" json:"ClusterId,omitempty"`
	IncludePrivate *bool   `form:"IncludePrivate,omitempty" json:"IncludePrivate,omitempty"`
}

// PostCapabilitiesApplicationWildcardPlusJSONRequestBody defines body for PostCapabilities for application/*+json ContentType.
type PostCapabilitiesApplicationWildcardPlusJSONRequestBody = NewCapabilityRequest

// PostCapabilitiesJSONRequestBody defines body for PostCapabilities for application/json ContentType.
type PostCapabilitiesJSONRequestBody = NewCapabilityRequest

// PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody defines body for PostCapabilitiesIdInvitations for application/*+json ContentType.
type PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody = InvitationsRequest

// PostCapabilitiesIdInvitationsJSONRequestBody defines body for PostCapabilitiesIdInvitations for application/json ContentType.
type PostCapabilitiesIdInvitationsJSONRequestBody = InvitationsRequest

// PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody defines body for PostCapabilitiesIdMetadata for application/*+json ContentType.
type PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody = SetCapabilityMetadataRequest

// PostCapabilitiesIdMetadataJSONRequestBody defines body for PostCapabilitiesIdMetadata for application/json ContentType.
type PostCapabilitiesIdMetadataJSONRequestBody = SetCapabilityMetadataRequest

// PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody defines body for PostCapabilitiesIdRequiredMetadata for application/*+json ContentType.
type PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody = SetCapabilityMetadataRequest

// PostCapabilitiesIdRequiredMetadataJSONRequestBody defines body for PostCapabilitiesIdRequiredMetadata for application/json ContentType.
type PostCapabilitiesIdRequiredMetadataJSONRequestBody = SetCapabilityMetadataRequest

// PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody defines body for PostCapabilitiesIdTopics for application/*+json ContentType.
type PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody = NewKafkaTopicRequest

// PostCapabilitiesIdTopicsJSONRequestBody defines body for PostCapabilitiesIdTopics for application/json ContentType.
type PostCapabilitiesIdTopicsJSONRequestBody = NewKafkaTopicRequest

// PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody defines body for PostEcrRepositories for application/*+json ContentType.
type PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody = NewECRRepositoryRequest

// PostEcrRepositoriesJSONRequestBody defines body for PostEcrRepositories for application/json ContentType.
type PostEcrRepositoriesJSONRequestBody = NewECRRepositoryRequest

// PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody defines body for PostJsonSchemaValidate for application/*+json ContentType.
type PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody = ValidateSelfServiceJsonSchemaRequest

// PostJsonSchemaValidateJSONRequestBody defines body for PostJsonSchemaValidate for application/json ContentType.
type PostJsonSchemaValidateJSONRequestBody = ValidateSelfServiceJsonSchemaRequest

// PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody defines body for PostJsonSchemaId for application/*+json ContentType.
type PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody = AddSelfServiceJsonSchemaRequest

// PostJsonSchemaIdJSONRequestBody defines body for PostJsonSchemaId for application/json ContentType.
type PostJsonSchemaIdJSONRequestBody = AddSelfServiceJsonSchemaRequest

// PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody defines body for PutKafkatopicsIdDescription for application/*+json ContentType.
type PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody = ChangeKafkaTopicDescriptionRequest

// PutKafkatopicsIdDescriptionJSONRequestBody defines body for PutKafkatopicsIdDescription for application/json ContentType.
type PutKafkatopicsIdDescriptionJSONRequestBody = ChangeKafkaTopicDescriptionRequest

// PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody defines body for PostKafkatopicsIdMessagecontracts for application/*+json ContentType.
type PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody = NewMessageContractRequest

// PostKafkatopicsIdMessagecontractsJSONRequestBody defines body for PostKafkatopicsIdMessagecontracts for application/json ContentType.
type PostKafkatopicsIdMessagecontractsJSONRequestBody = NewMessageContractRequest

// PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody defines body for PostKafkatopicsIdMessagecontractsValidate for application/*+json ContentType.
type PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody = ValidateMessageContractRequest

// PostKafkatopicsIdMessagecontractsValidateJSONRequestBody defines body for PostKafkatopicsIdMessagecontractsValidate for application/json ContentType.
type PostKafkatopicsIdMessagecontractsValidateJSONRequestBody = ValidateMessageContractRequest

// PutMePersonalinformationApplicationWildcardPlusJSONRequestBody defines body for PutMePersonalinformation for application/*+json ContentType.
type PutMePersonalinformationApplicationWildcardPlusJSONRequestBody = UpdatePersonalInformationRequest

// PutMePersonalinformationJSONRequestBody defines body for PutMePersonalinformation for application/json ContentType.
type PutMePersonalinformationJSONRequestBody = UpdatePersonalInformationRequest

// PostTeamsApplicationWildcardPlusJSONRequestBody defines body for PostTeams for application/*+json ContentType.
type PostTeamsApplicationWildcardPlusJSONRequestBody = AddTeamRequest

// PostTeamsJSONRequestBody defines body for PostTeams for application/json ContentType.
type PostTeamsJSONRequestBody = AddTeamRequest

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApispecs request
	GetApispecs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApispecsId request
	GetApispecsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilities request
	GetCapabilities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesWithBody request with any body
	PostCapabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostCapabilitiesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilities(ctx context.Context, body PostCapabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesId request
	GetCapabilitiesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdAwsaccount request
	GetCapabilitiesIdAwsaccount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdAwsaccount request
	PostCapabilitiesIdAwsaccount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdCanceldeletionrequest request
	PostCapabilitiesIdCanceldeletionrequest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdConfigurationlevel request
	GetCapabilitiesIdConfigurationlevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdInvitationsWithBody request with any body
	PostCapabilitiesIdInvitationsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdInvitationsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdInvitations(ctx context.Context, id string, body PostCapabilitiesIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdJoin request
	PostCapabilitiesIdJoin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdKafkaclusteraccess request
	GetCapabilitiesIdKafkaclusteraccess(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdKafkaclusteraccessClusterId request
	GetCapabilitiesIdKafkaclusteraccessClusterId(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdKafkaclusteraccessClusterId request
	PostCapabilitiesIdKafkaclusteraccessClusterId(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdLeave request
	PostCapabilitiesIdLeave(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdMembers request
	GetCapabilitiesIdMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdMembershipapplications request
	GetCapabilitiesIdMembershipapplications(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdMembershipapplications request
	PostCapabilitiesIdMembershipapplications(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdMetadata request
	GetCapabilitiesIdMetadata(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdMetadataWithBody request with any body
	PostCapabilitiesIdMetadataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdMetadataWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdMetadata(ctx context.Context, id string, body PostCapabilitiesIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdRequestdeletion request
	PostCapabilitiesIdRequestdeletion(ctx context.Context, id string, params *PostCapabilitiesIdRequestdeletionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdRequiredMetadataWithBody request with any body
	PostCapabilitiesIdRequiredMetadataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdRequiredMetadataWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdRequiredMetadata(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCapabilitiesIdTeams request
	GetCapabilitiesIdTeams(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCapabilitiesIdTopicsWithBody request with any body
	PostCapabilitiesIdTopicsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdTopicsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCapabilitiesIdTopics(ctx context.Context, id string, body PostCapabilitiesIdTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEcrRepositories request
	GetEcrRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEcrRepositoriesWithBody request with any body
	PostEcrRepositoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEcrRepositoriesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEcrRepositories(ctx context.Context, body PostEcrRepositoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEcrSynchronize request
	PostEcrSynchronize(ctx context.Context, params *PostEcrSynchronizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitations request
	GetInvitations(ctx context.Context, params *GetInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitationsId request
	GetInvitationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitationsIdAccept request
	PostInvitationsIdAccept(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitationsIdDecline request
	PostInvitationsIdDecline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJsonSchemaValidateWithBody request with any body
	PostJsonSchemaValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJsonSchemaValidateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJsonSchemaValidate(ctx context.Context, body PostJsonSchemaValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJsonSchemaId request
	GetJsonSchemaId(ctx context.Context, id string, params *GetJsonSchemaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJsonSchemaIdWithBody request with any body
	PostJsonSchemaIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJsonSchemaIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJsonSchemaId(ctx context.Context, id string, body PostJsonSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkaclusters request
	GetKafkaclusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkaclustersId request
	GetKafkaclustersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkatopics request
	GetKafkatopics(ctx context.Context, params *GetKafkatopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKafkatopicsId request
	DeleteKafkatopicsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkatopicsId request
	GetKafkatopicsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkatopicsIdConsumers request
	GetKafkatopicsIdConsumers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKafkatopicsIdDescriptionWithBody request with any body
	PutKafkatopicsIdDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKafkatopicsIdDescriptionWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKafkatopicsIdDescription(ctx context.Context, id string, body PutKafkatopicsIdDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkatopicsIdMessagecontracts request
	GetKafkatopicsIdMessagecontracts(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKafkatopicsIdMessagecontractsWithBody request with any body
	PostKafkatopicsIdMessagecontractsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKafkatopicsIdMessagecontractsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKafkatopicsIdMessagecontracts(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKafkatopicsIdMessagecontractsValidateWithBody request with any body
	PostKafkatopicsIdMessagecontractsValidateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKafkatopicsIdMessagecontractsValidateWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKafkatopicsIdMessagecontractsValidate(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKafkatopicsIdMessagecontractsContractId request
	GetKafkatopicsIdMessagecontractsContractId(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKafkatopicsIdMessagecontractsContractIdRetry request
	PostKafkatopicsIdMessagecontractsContractIdRetry(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMePersonalinformationWithBody request with any body
	PutMePersonalinformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMePersonalinformationWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutMePersonalinformationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMePersonalinformation(ctx context.Context, body PutMePersonalinformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembershipapplicationsId request
	GetMembershipapplicationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembershipapplicationsIdApprovals request
	GetMembershipapplicationsIdApprovals(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMembershipapplicationsIdApprovals request
	PostMembershipapplicationsIdApprovals(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricsMyCapabilitiesCosts request
	GetMetricsMyCapabilitiesCosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricsMyCapabilitiesResources request
	GetMetricsMyCapabilitiesResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricsOutOfSyncEcrRepos request
	GetMetricsOutOfSyncEcrRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPortalvisits request
	PostPortalvisits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStats request
	GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemLegacyAadAwsSync request
	GetSystemLegacyAadAwsSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemStatsTopvisitors request
	GetSystemStatsTopvisitors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeams request
	GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsWithBody request with any body
	PostTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeamsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTeamsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTeams(ctx context.Context, body PostTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamsId request
	DeleteTeamsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsId request
	GetTeamsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsIdCapabilityLinks request
	GetTeamsIdCapabilityLinks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamsIdCapabilityLinksCapabilityId request
	DeleteTeamsIdCapabilityLinksCapabilityId(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamsIdCapabilityLinksCapabilityId request
	PostTeamsIdCapabilityLinksCapabilityId(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsIdMembers request
	GetTeamsIdMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApispecs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApispecsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApispecsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApispecsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostCapabilitiesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilities(ctx context.Context, body PostCapabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdAwsaccount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdAwsaccountRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdAwsaccount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdAwsaccountRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdCanceldeletionrequest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdCanceldeletionrequestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdConfigurationlevel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdConfigurationlevelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdInvitationsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdInvitationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdInvitationsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdInvitationsRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdInvitations(ctx context.Context, id string, body PostCapabilitiesIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdInvitationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdJoin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdJoinRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdKafkaclusteraccess(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdKafkaclusteraccessRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdKafkaclusteraccessClusterId(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdKafkaclusteraccessClusterIdRequest(c.Server, id, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdKafkaclusteraccessClusterId(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdKafkaclusteraccessClusterIdRequest(c.Server, id, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdLeave(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdLeaveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdMembersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdMembershipapplications(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdMembershipapplicationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdMembershipapplications(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdMembershipapplicationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdMetadata(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdMetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdMetadataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdMetadataRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdMetadataWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdMetadataRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdMetadata(ctx context.Context, id string, body PostCapabilitiesIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdMetadataRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdRequestdeletion(ctx context.Context, id string, params *PostCapabilitiesIdRequestdeletionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdRequestdeletionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdRequiredMetadataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdRequiredMetadataRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdRequiredMetadataWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdRequiredMetadataRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdRequiredMetadata(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdRequiredMetadataRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilitiesIdTeams(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapabilitiesIdTeamsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdTopicsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdTopicsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdTopicsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdTopicsRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCapabilitiesIdTopics(ctx context.Context, id string, body PostCapabilitiesIdTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCapabilitiesIdTopicsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEcrRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEcrRepositoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEcrRepositoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEcrRepositoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEcrRepositoriesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEcrRepositoriesRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEcrRepositories(ctx context.Context, body PostEcrRepositoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEcrRepositoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEcrSynchronize(ctx context.Context, params *PostEcrSynchronizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEcrSynchronizeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitations(ctx context.Context, params *GetInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitationsIdAccept(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitationsIdAcceptRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitationsIdDecline(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitationsIdDeclineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaValidateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaValidateRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaValidate(ctx context.Context, body PostJsonSchemaValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaValidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJsonSchemaId(ctx context.Context, id string, params *GetJsonSchemaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJsonSchemaIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJsonSchemaId(ctx context.Context, id string, body PostJsonSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJsonSchemaIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkaclusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkaclustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkaclustersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkaclustersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkatopics(ctx context.Context, params *GetKafkatopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkatopicsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKafkatopicsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKafkatopicsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkatopicsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkatopicsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkatopicsIdConsumers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkatopicsIdConsumersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKafkatopicsIdDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKafkatopicsIdDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKafkatopicsIdDescriptionWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKafkatopicsIdDescriptionRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKafkatopicsIdDescription(ctx context.Context, id string, body PutKafkatopicsIdDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKafkatopicsIdDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkatopicsIdMessagecontracts(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkatopicsIdMessagecontractsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontracts(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsValidateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsValidateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsValidateWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsValidateRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsValidate(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsValidateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKafkatopicsIdMessagecontractsContractId(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKafkatopicsIdMessagecontractsContractIdRequest(c.Server, id, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKafkatopicsIdMessagecontractsContractIdRetry(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKafkatopicsIdMessagecontractsContractIdRetryRequest(c.Server, id, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMePersonalinformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMePersonalinformationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMePersonalinformationWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutMePersonalinformationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMePersonalinformationRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMePersonalinformation(ctx context.Context, body PutMePersonalinformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMePersonalinformationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembershipapplicationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembershipapplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembershipapplicationsIdApprovals(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembershipapplicationsIdApprovalsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMembershipapplicationsIdApprovals(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMembershipapplicationsIdApprovalsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricsMyCapabilitiesCosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsMyCapabilitiesCostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricsMyCapabilitiesResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsMyCapabilitiesResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricsOutOfSyncEcrRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsOutOfSyncEcrReposRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPortalvisits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPortalvisitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemLegacyAadAwsSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemLegacyAadAwsSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemStatsTopvisitors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemStatsTopvisitorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTeamsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeams(ctx context.Context, body PostTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsIdCapabilityLinks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsIdCapabilityLinksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamsIdCapabilityLinksCapabilityId(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamsIdCapabilityLinksCapabilityIdRequest(c.Server, id, capabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamsIdCapabilityLinksCapabilityId(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamsIdCapabilityLinksCapabilityIdRequest(c.Server, id, capabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsIdMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsIdMembersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApispecsRequest generates requests for GetApispecs
func NewGetApispecsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apispecs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApispecsIdRequest generates requests for GetApispecsId
func NewGetApispecsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apispecs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesRequest generates requests for GetCapabilities
func NewGetCapabilitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesRequestWithApplicationWildcardPlusJSONBody calls the generic PostCapabilities builder with application/*+json body
func NewPostCapabilitiesRequestWithApplicationWildcardPlusJSONBody(server string, body PostCapabilitiesApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostCapabilitiesRequest calls the generic PostCapabilities builder with application/json body
func NewPostCapabilitiesRequest(server string, body PostCapabilitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCapabilitiesRequestWithBody generates requests for PostCapabilities with any type of body
func NewPostCapabilitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCapabilitiesIdRequest generates requests for GetCapabilitiesId
func NewGetCapabilitiesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdAwsaccountRequest generates requests for GetCapabilitiesIdAwsaccount
func NewGetCapabilitiesIdAwsaccountRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/awsaccount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdAwsaccountRequest generates requests for PostCapabilitiesIdAwsaccount
func NewPostCapabilitiesIdAwsaccountRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/awsaccount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdCanceldeletionrequestRequest generates requests for PostCapabilitiesIdCanceldeletionrequest
func NewPostCapabilitiesIdCanceldeletionrequestRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/canceldeletionrequest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdConfigurationlevelRequest generates requests for GetCapabilitiesIdConfigurationlevel
func NewGetCapabilitiesIdConfigurationlevelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/configurationlevel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdInvitationsRequestWithApplicationWildcardPlusJSONBody calls the generic PostCapabilitiesIdInvitations builder with application/*+json body
func NewPostCapabilitiesIdInvitationsRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdInvitationsRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostCapabilitiesIdInvitationsRequest calls the generic PostCapabilitiesIdInvitations builder with application/json body
func NewPostCapabilitiesIdInvitationsRequest(server string, id string, body PostCapabilitiesIdInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdInvitationsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCapabilitiesIdInvitationsRequestWithBody generates requests for PostCapabilitiesIdInvitations with any type of body
func NewPostCapabilitiesIdInvitationsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCapabilitiesIdJoinRequest generates requests for PostCapabilitiesIdJoin
func NewPostCapabilitiesIdJoinRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdKafkaclusteraccessRequest generates requests for GetCapabilitiesIdKafkaclusteraccess
func NewGetCapabilitiesIdKafkaclusteraccessRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/kafkaclusteraccess", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdKafkaclusteraccessClusterIdRequest generates requests for GetCapabilitiesIdKafkaclusteraccessClusterId
func NewGetCapabilitiesIdKafkaclusteraccessClusterIdRequest(server string, id string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/kafkaclusteraccess/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdKafkaclusteraccessClusterIdRequest generates requests for PostCapabilitiesIdKafkaclusteraccessClusterId
func NewPostCapabilitiesIdKafkaclusteraccessClusterIdRequest(server string, id string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/kafkaclusteraccess/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdLeaveRequest generates requests for PostCapabilitiesIdLeave
func NewPostCapabilitiesIdLeaveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdMembersRequest generates requests for GetCapabilitiesIdMembers
func NewGetCapabilitiesIdMembersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdMembershipapplicationsRequest generates requests for GetCapabilitiesIdMembershipapplications
func NewGetCapabilitiesIdMembershipapplicationsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/membershipapplications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdMembershipapplicationsRequest generates requests for PostCapabilitiesIdMembershipapplications
func NewPostCapabilitiesIdMembershipapplicationsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/membershipapplications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilitiesIdMetadataRequest generates requests for GetCapabilitiesIdMetadata
func NewGetCapabilitiesIdMetadataRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdMetadataRequestWithApplicationWildcardPlusJSONBody calls the generic PostCapabilitiesIdMetadata builder with application/*+json body
func NewPostCapabilitiesIdMetadataRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdMetadataRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostCapabilitiesIdMetadataRequest calls the generic PostCapabilitiesIdMetadata builder with application/json body
func NewPostCapabilitiesIdMetadataRequest(server string, id string, body PostCapabilitiesIdMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdMetadataRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCapabilitiesIdMetadataRequestWithBody generates requests for PostCapabilitiesIdMetadata with any type of body
func NewPostCapabilitiesIdMetadataRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCapabilitiesIdRequestdeletionRequest generates requests for PostCapabilitiesIdRequestdeletion
func NewPostCapabilitiesIdRequestdeletionRequest(server string, id string, params *PostCapabilitiesIdRequestdeletionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/requestdeletion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdRequiredMetadataRequestWithApplicationWildcardPlusJSONBody calls the generic PostCapabilitiesIdRequiredMetadata builder with application/*+json body
func NewPostCapabilitiesIdRequiredMetadataRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdRequiredMetadataRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostCapabilitiesIdRequiredMetadataRequest calls the generic PostCapabilitiesIdRequiredMetadata builder with application/json body
func NewPostCapabilitiesIdRequiredMetadataRequest(server string, id string, body PostCapabilitiesIdRequiredMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdRequiredMetadataRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCapabilitiesIdRequiredMetadataRequestWithBody generates requests for PostCapabilitiesIdRequiredMetadata with any type of body
func NewPostCapabilitiesIdRequiredMetadataRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/required-metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCapabilitiesIdTeamsRequest generates requests for GetCapabilitiesIdTeams
func NewGetCapabilitiesIdTeamsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCapabilitiesIdTopicsRequestWithApplicationWildcardPlusJSONBody calls the generic PostCapabilitiesIdTopics builder with application/*+json body
func NewPostCapabilitiesIdTopicsRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdTopicsRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostCapabilitiesIdTopicsRequest calls the generic PostCapabilitiesIdTopics builder with application/json body
func NewPostCapabilitiesIdTopicsRequest(server string, id string, body PostCapabilitiesIdTopicsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCapabilitiesIdTopicsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCapabilitiesIdTopicsRequestWithBody generates requests for PostCapabilitiesIdTopics with any type of body
func NewPostCapabilitiesIdTopicsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capabilities/%s/topics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEcrRepositoriesRequest generates requests for GetEcrRepositories
func NewGetEcrRepositoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecr/repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEcrRepositoriesRequestWithApplicationWildcardPlusJSONBody calls the generic PostEcrRepositories builder with application/*+json body
func NewPostEcrRepositoriesRequestWithApplicationWildcardPlusJSONBody(server string, body PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEcrRepositoriesRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostEcrRepositoriesRequest calls the generic PostEcrRepositories builder with application/json body
func NewPostEcrRepositoriesRequest(server string, body PostEcrRepositoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEcrRepositoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEcrRepositoriesRequestWithBody generates requests for PostEcrRepositories with any type of body
func NewPostEcrRepositoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecr/repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEcrSynchronizeRequest generates requests for PostEcrSynchronize
func NewPostEcrSynchronizeRequest(server string, params *PostEcrSynchronizeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ecr/synchronize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateOnMismatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateOnMismatch", runtime.ParamLocationQuery, *params.UpdateOnMismatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvitationsRequest generates requests for GetInvitations
func NewGetInvitationsRequest(server string, params *GetInvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TargetType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetType", runtime.ParamLocationQuery, *params.TargetType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvitationsIdRequest generates requests for GetInvitationsId
func NewGetInvitationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvitationsIdAcceptRequest generates requests for PostInvitationsIdAccept
func NewPostInvitationsIdAcceptRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvitationsIdDeclineRequest generates requests for PostInvitationsIdDecline
func NewPostInvitationsIdDeclineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s/decline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJsonSchemaValidateRequestWithApplicationWildcardPlusJSONBody calls the generic PostJsonSchemaValidate builder with application/*+json body
func NewPostJsonSchemaValidateRequestWithApplicationWildcardPlusJSONBody(server string, body PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJsonSchemaValidateRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostJsonSchemaValidateRequest calls the generic PostJsonSchemaValidate builder with application/json body
func NewPostJsonSchemaValidateRequest(server string, body PostJsonSchemaValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJsonSchemaValidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJsonSchemaValidateRequestWithBody generates requests for PostJsonSchemaValidate with any type of body
func NewPostJsonSchemaValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/json-schema/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJsonSchemaIdRequest generates requests for GetJsonSchemaId
func NewGetJsonSchemaIdRequest(server string, id string, params *GetJsonSchemaIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/json-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SchemaVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schemaVersion", runtime.ParamLocationQuery, *params.SchemaVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJsonSchemaIdRequestWithApplicationWildcardPlusJSONBody calls the generic PostJsonSchemaId builder with application/*+json body
func NewPostJsonSchemaIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJsonSchemaIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostJsonSchemaIdRequest calls the generic PostJsonSchemaId builder with application/json body
func NewPostJsonSchemaIdRequest(server string, id string, body PostJsonSchemaIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJsonSchemaIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostJsonSchemaIdRequestWithBody generates requests for PostJsonSchemaId with any type of body
func NewPostJsonSchemaIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/json-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKafkaclustersRequest generates requests for GetKafkaclusters
func NewGetKafkaclustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkaclusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKafkaclustersIdRequest generates requests for GetKafkaclustersId
func NewGetKafkaclustersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkaclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKafkatopicsRequest generates requests for GetKafkatopics
func NewGetKafkatopicsRequest(server string, params *GetKafkatopicsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CapabilityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CapabilityId", runtime.ParamLocationQuery, *params.CapabilityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ClusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludePrivate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludePrivate", runtime.ParamLocationQuery, *params.IncludePrivate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteKafkatopicsIdRequest generates requests for DeleteKafkatopicsId
func NewDeleteKafkatopicsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKafkatopicsIdRequest generates requests for GetKafkatopicsId
func NewGetKafkatopicsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKafkatopicsIdConsumersRequest generates requests for GetKafkatopicsIdConsumers
func NewGetKafkatopicsIdConsumersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/consumers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKafkatopicsIdDescriptionRequestWithApplicationWildcardPlusJSONBody calls the generic PutKafkatopicsIdDescription builder with application/*+json body
func NewPutKafkatopicsIdDescriptionRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKafkatopicsIdDescriptionRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutKafkatopicsIdDescriptionRequest calls the generic PutKafkatopicsIdDescription builder with application/json body
func NewPutKafkatopicsIdDescriptionRequest(server string, id string, body PutKafkatopicsIdDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKafkatopicsIdDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKafkatopicsIdDescriptionRequestWithBody generates requests for PutKafkatopicsIdDescription with any type of body
func NewPutKafkatopicsIdDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/description", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKafkatopicsIdMessagecontractsRequest generates requests for GetKafkatopicsIdMessagecontracts
func NewGetKafkatopicsIdMessagecontractsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/messagecontracts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKafkatopicsIdMessagecontractsRequestWithApplicationWildcardPlusJSONBody calls the generic PostKafkatopicsIdMessagecontracts builder with application/*+json body
func NewPostKafkatopicsIdMessagecontractsRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKafkatopicsIdMessagecontractsRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostKafkatopicsIdMessagecontractsRequest calls the generic PostKafkatopicsIdMessagecontracts builder with application/json body
func NewPostKafkatopicsIdMessagecontractsRequest(server string, id string, body PostKafkatopicsIdMessagecontractsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKafkatopicsIdMessagecontractsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostKafkatopicsIdMessagecontractsRequestWithBody generates requests for PostKafkatopicsIdMessagecontracts with any type of body
func NewPostKafkatopicsIdMessagecontractsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/messagecontracts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKafkatopicsIdMessagecontractsValidateRequestWithApplicationWildcardPlusJSONBody calls the generic PostKafkatopicsIdMessagecontractsValidate builder with application/*+json body
func NewPostKafkatopicsIdMessagecontractsValidateRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKafkatopicsIdMessagecontractsValidateRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPostKafkatopicsIdMessagecontractsValidateRequest calls the generic PostKafkatopicsIdMessagecontractsValidate builder with application/json body
func NewPostKafkatopicsIdMessagecontractsValidateRequest(server string, id string, body PostKafkatopicsIdMessagecontractsValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKafkatopicsIdMessagecontractsValidateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostKafkatopicsIdMessagecontractsValidateRequestWithBody generates requests for PostKafkatopicsIdMessagecontractsValidate with any type of body
func NewPostKafkatopicsIdMessagecontractsValidateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/messagecontracts-validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKafkatopicsIdMessagecontractsContractIdRequest generates requests for GetKafkatopicsIdMessagecontractsContractId
func NewGetKafkatopicsIdMessagecontractsContractIdRequest(server string, id string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/messagecontracts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKafkatopicsIdMessagecontractsContractIdRetryRequest generates requests for PostKafkatopicsIdMessagecontractsContractIdRetry
func NewPostKafkatopicsIdMessagecontractsContractIdRetryRequest(server string, id string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kafkatopics/%s/messagecontracts/%s/retry", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMePersonalinformationRequestWithApplicationWildcardPlusJSONBody calls the generic PutMePersonalinformation builder with application/*+json body
func NewPutMePersonalinformationRequestWithApplicationWildcardPlusJSONBody(server string, body PutMePersonalinformationApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMePersonalinformationRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutMePersonalinformationRequest calls the generic PutMePersonalinformation builder with application/json body
func NewPutMePersonalinformationRequest(server string, body PutMePersonalinformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMePersonalinformationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMePersonalinformationRequestWithBody generates requests for PutMePersonalinformation with any type of body
func NewPutMePersonalinformationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/personalinformation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembershipapplicationsIdRequest generates requests for GetMembershipapplicationsId
func NewGetMembershipapplicationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/membershipapplications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMembershipapplicationsIdApprovalsRequest generates requests for GetMembershipapplicationsIdApprovals
func NewGetMembershipapplicationsIdApprovalsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/membershipapplications/%s/approvals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMembershipapplicationsIdApprovalsRequest generates requests for PostMembershipapplicationsIdApprovals
func NewPostMembershipapplicationsIdApprovalsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/membershipapplications/%s/approvals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsMyCapabilitiesCostsRequest generates requests for GetMetricsMyCapabilitiesCosts
func NewGetMetricsMyCapabilitiesCostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/my-capabilities-costs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsMyCapabilitiesResourcesRequest generates requests for GetMetricsMyCapabilitiesResources
func NewGetMetricsMyCapabilitiesResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/my-capabilities-resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsOutOfSyncEcrReposRequest generates requests for GetMetricsOutOfSyncEcrRepos
func NewGetMetricsOutOfSyncEcrReposRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/out-of-sync-ecr-repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPortalvisitsRequest generates requests for PostPortalvisits
func NewPostPortalvisitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/portalvisits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatsRequest generates requests for GetStats
func NewGetStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemLegacyAadAwsSyncRequest generates requests for GetSystemLegacyAadAwsSync
func NewGetSystemLegacyAadAwsSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/legacy/aad-aws-sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemStatsTopvisitorsRequest generates requests for GetSystemStatsTopvisitors
func NewGetSystemStatsTopvisitorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/stats/topvisitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsRequest generates requests for GetTeams
func NewGetTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsRequestWithApplicationWildcardPlusJSONBody calls the generic PostTeams builder with application/*+json body
func NewPostTeamsRequestWithApplicationWildcardPlusJSONBody(server string, body PostTeamsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostTeamsRequest calls the generic PostTeams builder with application/json body
func NewPostTeamsRequest(server string, body PostTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTeamsRequestWithBody generates requests for PostTeams with any type of body
func NewPostTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamsIdRequest generates requests for DeleteTeamsId
func NewDeleteTeamsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsIdRequest generates requests for GetTeamsId
func NewGetTeamsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsIdCapabilityLinksRequest generates requests for GetTeamsIdCapabilityLinks
func NewGetTeamsIdCapabilityLinksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/capability-links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTeamsIdCapabilityLinksCapabilityIdRequest generates requests for DeleteTeamsIdCapabilityLinksCapabilityId
func NewDeleteTeamsIdCapabilityLinksCapabilityIdRequest(server string, id string, capabilityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "capabilityId", runtime.ParamLocationPath, capabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/capability-links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamsIdCapabilityLinksCapabilityIdRequest generates requests for PostTeamsIdCapabilityLinksCapabilityId
func NewPostTeamsIdCapabilityLinksCapabilityIdRequest(server string, id string, capabilityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "capabilityId", runtime.ParamLocationPath, capabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/capability-links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsIdMembersRequest generates requests for GetTeamsIdMembers
func NewGetTeamsIdMembersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApispecsWithResponse request
	GetApispecsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApispecsResponse, error)

	// GetApispecsIdWithResponse request
	GetApispecsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApispecsIdResponse, error)

	// GetCapabilitiesWithResponse request
	GetCapabilitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCapabilitiesResponse, error)

	// PostCapabilitiesWithBodyWithResponse request with any body
	PostCapabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error)

	PostCapabilitiesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostCapabilitiesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error)

	PostCapabilitiesWithResponse(ctx context.Context, body PostCapabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error)

	// GetCapabilitiesIdWithResponse request
	GetCapabilitiesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdResponse, error)

	// GetCapabilitiesIdAwsaccountWithResponse request
	GetCapabilitiesIdAwsaccountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdAwsaccountResponse, error)

	// PostCapabilitiesIdAwsaccountWithResponse request
	PostCapabilitiesIdAwsaccountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdAwsaccountResponse, error)

	// PostCapabilitiesIdCanceldeletionrequestWithResponse request
	PostCapabilitiesIdCanceldeletionrequestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdCanceldeletionrequestResponse, error)

	// GetCapabilitiesIdConfigurationlevelWithResponse request
	GetCapabilitiesIdConfigurationlevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdConfigurationlevelResponse, error)

	// PostCapabilitiesIdInvitationsWithBodyWithResponse request with any body
	PostCapabilitiesIdInvitationsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error)

	PostCapabilitiesIdInvitationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error)

	PostCapabilitiesIdInvitationsWithResponse(ctx context.Context, id string, body PostCapabilitiesIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error)

	// PostCapabilitiesIdJoinWithResponse request
	PostCapabilitiesIdJoinWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdJoinResponse, error)

	// GetCapabilitiesIdKafkaclusteraccessWithResponse request
	GetCapabilitiesIdKafkaclusteraccessWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdKafkaclusteraccessResponse, error)

	// GetCapabilitiesIdKafkaclusteraccessClusterIdWithResponse request
	GetCapabilitiesIdKafkaclusteraccessClusterIdWithResponse(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdKafkaclusteraccessClusterIdResponse, error)

	// PostCapabilitiesIdKafkaclusteraccessClusterIdWithResponse request
	PostCapabilitiesIdKafkaclusteraccessClusterIdWithResponse(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdKafkaclusteraccessClusterIdResponse, error)

	// PostCapabilitiesIdLeaveWithResponse request
	PostCapabilitiesIdLeaveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdLeaveResponse, error)

	// GetCapabilitiesIdMembersWithResponse request
	GetCapabilitiesIdMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMembersResponse, error)

	// GetCapabilitiesIdMembershipapplicationsWithResponse request
	GetCapabilitiesIdMembershipapplicationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMembershipapplicationsResponse, error)

	// PostCapabilitiesIdMembershipapplicationsWithResponse request
	PostCapabilitiesIdMembershipapplicationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMembershipapplicationsResponse, error)

	// GetCapabilitiesIdMetadataWithResponse request
	GetCapabilitiesIdMetadataWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMetadataResponse, error)

	// PostCapabilitiesIdMetadataWithBodyWithResponse request with any body
	PostCapabilitiesIdMetadataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error)

	PostCapabilitiesIdMetadataWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error)

	PostCapabilitiesIdMetadataWithResponse(ctx context.Context, id string, body PostCapabilitiesIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error)

	// PostCapabilitiesIdRequestdeletionWithResponse request
	PostCapabilitiesIdRequestdeletionWithResponse(ctx context.Context, id string, params *PostCapabilitiesIdRequestdeletionParams, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequestdeletionResponse, error)

	// PostCapabilitiesIdRequiredMetadataWithBodyWithResponse request with any body
	PostCapabilitiesIdRequiredMetadataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error)

	PostCapabilitiesIdRequiredMetadataWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error)

	PostCapabilitiesIdRequiredMetadataWithResponse(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error)

	// GetCapabilitiesIdTeamsWithResponse request
	GetCapabilitiesIdTeamsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdTeamsResponse, error)

	// PostCapabilitiesIdTopicsWithBodyWithResponse request with any body
	PostCapabilitiesIdTopicsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error)

	PostCapabilitiesIdTopicsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error)

	PostCapabilitiesIdTopicsWithResponse(ctx context.Context, id string, body PostCapabilitiesIdTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error)

	// GetEcrRepositoriesWithResponse request
	GetEcrRepositoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEcrRepositoriesResponse, error)

	// PostEcrRepositoriesWithBodyWithResponse request with any body
	PostEcrRepositoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error)

	PostEcrRepositoriesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error)

	PostEcrRepositoriesWithResponse(ctx context.Context, body PostEcrRepositoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error)

	// PostEcrSynchronizeWithResponse request
	PostEcrSynchronizeWithResponse(ctx context.Context, params *PostEcrSynchronizeParams, reqEditors ...RequestEditorFn) (*PostEcrSynchronizeResponse, error)

	// GetInvitationsWithResponse request
	GetInvitationsWithResponse(ctx context.Context, params *GetInvitationsParams, reqEditors ...RequestEditorFn) (*GetInvitationsResponse, error)

	// GetInvitationsIdWithResponse request
	GetInvitationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInvitationsIdResponse, error)

	// PostInvitationsIdAcceptWithResponse request
	PostInvitationsIdAcceptWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostInvitationsIdAcceptResponse, error)

	// PostInvitationsIdDeclineWithResponse request
	PostInvitationsIdDeclineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostInvitationsIdDeclineResponse, error)

	// PostJsonSchemaValidateWithBodyWithResponse request with any body
	PostJsonSchemaValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error)

	PostJsonSchemaValidateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error)

	PostJsonSchemaValidateWithResponse(ctx context.Context, body PostJsonSchemaValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error)

	// GetJsonSchemaIdWithResponse request
	GetJsonSchemaIdWithResponse(ctx context.Context, id string, params *GetJsonSchemaIdParams, reqEditors ...RequestEditorFn) (*GetJsonSchemaIdResponse, error)

	// PostJsonSchemaIdWithBodyWithResponse request with any body
	PostJsonSchemaIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error)

	PostJsonSchemaIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error)

	PostJsonSchemaIdWithResponse(ctx context.Context, id string, body PostJsonSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error)

	// GetKafkaclustersWithResponse request
	GetKafkaclustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKafkaclustersResponse, error)

	// GetKafkaclustersIdWithResponse request
	GetKafkaclustersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkaclustersIdResponse, error)

	// GetKafkatopicsWithResponse request
	GetKafkatopicsWithResponse(ctx context.Context, params *GetKafkatopicsParams, reqEditors ...RequestEditorFn) (*GetKafkatopicsResponse, error)

	// DeleteKafkatopicsIdWithResponse request
	DeleteKafkatopicsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteKafkatopicsIdResponse, error)

	// GetKafkatopicsIdWithResponse request
	GetKafkatopicsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdResponse, error)

	// GetKafkatopicsIdConsumersWithResponse request
	GetKafkatopicsIdConsumersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdConsumersResponse, error)

	// PutKafkatopicsIdDescriptionWithBodyWithResponse request with any body
	PutKafkatopicsIdDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error)

	PutKafkatopicsIdDescriptionWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error)

	PutKafkatopicsIdDescriptionWithResponse(ctx context.Context, id string, body PutKafkatopicsIdDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error)

	// GetKafkatopicsIdMessagecontractsWithResponse request
	GetKafkatopicsIdMessagecontractsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdMessagecontractsResponse, error)

	// PostKafkatopicsIdMessagecontractsWithBodyWithResponse request with any body
	PostKafkatopicsIdMessagecontractsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error)

	PostKafkatopicsIdMessagecontractsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error)

	PostKafkatopicsIdMessagecontractsWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error)

	// PostKafkatopicsIdMessagecontractsValidateWithBodyWithResponse request with any body
	PostKafkatopicsIdMessagecontractsValidateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error)

	PostKafkatopicsIdMessagecontractsValidateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error)

	PostKafkatopicsIdMessagecontractsValidateWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error)

	// GetKafkatopicsIdMessagecontractsContractIdWithResponse request
	GetKafkatopicsIdMessagecontractsContractIdWithResponse(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdMessagecontractsContractIdResponse, error)

	// PostKafkatopicsIdMessagecontractsContractIdRetryWithResponse request
	PostKafkatopicsIdMessagecontractsContractIdRetryWithResponse(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsContractIdRetryResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// PutMePersonalinformationWithBodyWithResponse request with any body
	PutMePersonalinformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error)

	PutMePersonalinformationWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutMePersonalinformationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error)

	PutMePersonalinformationWithResponse(ctx context.Context, body PutMePersonalinformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error)

	// GetMembershipapplicationsIdWithResponse request
	GetMembershipapplicationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMembershipapplicationsIdResponse, error)

	// GetMembershipapplicationsIdApprovalsWithResponse request
	GetMembershipapplicationsIdApprovalsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMembershipapplicationsIdApprovalsResponse, error)

	// PostMembershipapplicationsIdApprovalsWithResponse request
	PostMembershipapplicationsIdApprovalsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostMembershipapplicationsIdApprovalsResponse, error)

	// GetMetricsMyCapabilitiesCostsWithResponse request
	GetMetricsMyCapabilitiesCostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsMyCapabilitiesCostsResponse, error)

	// GetMetricsMyCapabilitiesResourcesWithResponse request
	GetMetricsMyCapabilitiesResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsMyCapabilitiesResourcesResponse, error)

	// GetMetricsOutOfSyncEcrReposWithResponse request
	GetMetricsOutOfSyncEcrReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsOutOfSyncEcrReposResponse, error)

	// PostPortalvisitsWithResponse request
	PostPortalvisitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPortalvisitsResponse, error)

	// GetStatsWithResponse request
	GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error)

	// GetSystemLegacyAadAwsSyncWithResponse request
	GetSystemLegacyAadAwsSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemLegacyAadAwsSyncResponse, error)

	// GetSystemStatsTopvisitorsWithResponse request
	GetSystemStatsTopvisitorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStatsTopvisitorsResponse, error)

	// GetTeamsWithResponse request
	GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error)

	// PostTeamsWithBodyWithResponse request with any body
	PostTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error)

	PostTeamsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTeamsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error)

	PostTeamsWithResponse(ctx context.Context, body PostTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error)

	// DeleteTeamsIdWithResponse request
	DeleteTeamsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamsIdResponse, error)

	// GetTeamsIdWithResponse request
	GetTeamsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdResponse, error)

	// GetTeamsIdCapabilityLinksWithResponse request
	GetTeamsIdCapabilityLinksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdCapabilityLinksResponse, error)

	// DeleteTeamsIdCapabilityLinksCapabilityIdWithResponse request
	DeleteTeamsIdCapabilityLinksCapabilityIdWithResponse(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*DeleteTeamsIdCapabilityLinksCapabilityIdResponse, error)

	// PostTeamsIdCapabilityLinksCapabilityIdWithResponse request
	PostTeamsIdCapabilityLinksCapabilityIdWithResponse(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*PostTeamsIdCapabilityLinksCapabilityIdResponse, error)

	// GetTeamsIdMembersWithResponse request
	GetTeamsIdMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdMembersResponse, error)
}

type GetApispecsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApispecsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApispecsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApispecsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApispecsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApispecsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CapabilityListApiResource
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CapabilityDetailsApiResource
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CapabilityDetailsApiResource
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdAwsaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AwsAccountApiResource
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdAwsaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdAwsaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdAwsaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AwsAccountApiResource
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdAwsaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdAwsaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdCanceldeletionrequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdCanceldeletionrequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdCanceldeletionrequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdConfigurationlevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdConfigurationlevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdConfigurationlevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CapabilityDetailsApiResource
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdKafkaclusteraccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdKafkaclusteraccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdKafkaclusteraccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdKafkaclusteraccessClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdKafkaclusteraccessClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdKafkaclusteraccessClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdKafkaclusteraccessClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdKafkaclusteraccessClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdKafkaclusteraccessClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CapabilityMembersApiResource
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdMembershipapplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipApplicationListApiResource
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdMembershipapplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdMembershipapplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdMembershipapplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MembershipApplicationApiResource
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdMembershipapplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdMembershipapplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdRequestdeletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdRequestdeletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdRequestdeletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdRequiredMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdRequiredMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdRequiredMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilitiesIdTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCapabilitiesIdTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilitiesIdTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCapabilitiesIdTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r PostCapabilitiesIdTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCapabilitiesIdTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEcrRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ECRRepository
}

// Status returns HTTPResponse.Status
func (r GetEcrRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEcrRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEcrRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ECRRepository
}

// Status returns HTTPResponse.Status
func (r PostEcrRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEcrRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEcrSynchronizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEcrSynchronizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEcrSynchronizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInvitationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitationsIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInvitationsIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitationsIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitationsIdDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInvitationsIdDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitationsIdDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJsonSchemaValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJsonSchemaValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJsonSchemaValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJsonSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJsonSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJsonSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJsonSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJsonSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJsonSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkaclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKafkaclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkaclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkaclustersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKafkaclustersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkaclustersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkatopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicListApiResource
}

// Status returns HTTPResponse.Status
func (r GetKafkatopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkatopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKafkatopicsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r DeleteKafkatopicsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKafkatopicsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkatopicsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r GetKafkatopicsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkatopicsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkatopicsIdConsumersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r GetKafkatopicsIdConsumersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkatopicsIdConsumersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKafkatopicsIdDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r PutKafkatopicsIdDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKafkatopicsIdDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkatopicsIdMessagecontractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
}

// Status returns HTTPResponse.Status
func (r GetKafkatopicsIdMessagecontractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkatopicsIdMessagecontractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKafkatopicsIdMessagecontractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
	JSON400      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostKafkatopicsIdMessagecontractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKafkatopicsIdMessagecontractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKafkatopicsIdMessagecontractsValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
	JSON400      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostKafkatopicsIdMessagecontractsValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKafkatopicsIdMessagecontractsValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKafkatopicsIdMessagecontractsContractIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKafkatopicsIdMessagecontractsContractIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKafkatopicsIdMessagecontractsContractIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKafkatopicsIdMessagecontractsContractIdRetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KafkaTopicApiResource
	JSON400      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostKafkatopicsIdMessagecontractsContractIdRetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKafkatopicsIdMessagecontractsContractIdRetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMePersonalinformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMePersonalinformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMePersonalinformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembershipapplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipApplicationApiResource
}

// Status returns HTTPResponse.Status
func (r GetMembershipapplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembershipapplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembershipapplicationsIdApprovalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipApprovalListApiResource
}

// Status returns HTTPResponse.Status
func (r GetMembershipapplicationsIdApprovalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembershipapplicationsIdApprovalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMembershipapplicationsIdApprovalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMembershipapplicationsIdApprovalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMembershipapplicationsIdApprovalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsMyCapabilitiesCostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetricsMyCapabilitiesCostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsMyCapabilitiesCostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsMyCapabilitiesResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetricsMyCapabilitiesResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsMyCapabilitiesResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsOutOfSyncEcrReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetricsOutOfSyncEcrReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsOutOfSyncEcrReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPortalvisitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPortalvisitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPortalvisitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemLegacyAadAwsSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemLegacyAadAwsSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemLegacyAadAwsSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemStatsTopvisitorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemStatsTopvisitorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemStatsTopvisitorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsIdCapabilityLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsIdCapabilityLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsIdCapabilityLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamsIdCapabilityLinksCapabilityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamsIdCapabilityLinksCapabilityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamsIdCapabilityLinksCapabilityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamsIdCapabilityLinksCapabilityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTeamsIdCapabilityLinksCapabilityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamsIdCapabilityLinksCapabilityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApispecsWithResponse request returning *GetApispecsResponse
func (c *ClientWithResponses) GetApispecsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApispecsResponse, error) {
	rsp, err := c.GetApispecs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApispecsResponse(rsp)
}

// GetApispecsIdWithResponse request returning *GetApispecsIdResponse
func (c *ClientWithResponses) GetApispecsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApispecsIdResponse, error) {
	rsp, err := c.GetApispecsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApispecsIdResponse(rsp)
}

// GetCapabilitiesWithResponse request returning *GetCapabilitiesResponse
func (c *ClientWithResponses) GetCapabilitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCapabilitiesResponse, error) {
	rsp, err := c.GetCapabilities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesResponse(rsp)
}

// PostCapabilitiesWithBodyWithResponse request with arbitrary body returning *PostCapabilitiesResponse
func (c *ClientWithResponses) PostCapabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error) {
	rsp, err := c.PostCapabilitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostCapabilitiesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error) {
	rsp, err := c.PostCapabilitiesWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesWithResponse(ctx context.Context, body PostCapabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesResponse, error) {
	rsp, err := c.PostCapabilities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesResponse(rsp)
}

// GetCapabilitiesIdWithResponse request returning *GetCapabilitiesIdResponse
func (c *ClientWithResponses) GetCapabilitiesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdResponse, error) {
	rsp, err := c.GetCapabilitiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdResponse(rsp)
}

// GetCapabilitiesIdAwsaccountWithResponse request returning *GetCapabilitiesIdAwsaccountResponse
func (c *ClientWithResponses) GetCapabilitiesIdAwsaccountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdAwsaccountResponse, error) {
	rsp, err := c.GetCapabilitiesIdAwsaccount(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdAwsaccountResponse(rsp)
}

// PostCapabilitiesIdAwsaccountWithResponse request returning *PostCapabilitiesIdAwsaccountResponse
func (c *ClientWithResponses) PostCapabilitiesIdAwsaccountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdAwsaccountResponse, error) {
	rsp, err := c.PostCapabilitiesIdAwsaccount(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdAwsaccountResponse(rsp)
}

// PostCapabilitiesIdCanceldeletionrequestWithResponse request returning *PostCapabilitiesIdCanceldeletionrequestResponse
func (c *ClientWithResponses) PostCapabilitiesIdCanceldeletionrequestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdCanceldeletionrequestResponse, error) {
	rsp, err := c.PostCapabilitiesIdCanceldeletionrequest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdCanceldeletionrequestResponse(rsp)
}

// GetCapabilitiesIdConfigurationlevelWithResponse request returning *GetCapabilitiesIdConfigurationlevelResponse
func (c *ClientWithResponses) GetCapabilitiesIdConfigurationlevelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdConfigurationlevelResponse, error) {
	rsp, err := c.GetCapabilitiesIdConfigurationlevel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdConfigurationlevelResponse(rsp)
}

// PostCapabilitiesIdInvitationsWithBodyWithResponse request with arbitrary body returning *PostCapabilitiesIdInvitationsResponse
func (c *ClientWithResponses) PostCapabilitiesIdInvitationsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error) {
	rsp, err := c.PostCapabilitiesIdInvitationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdInvitationsResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdInvitationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdInvitationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error) {
	rsp, err := c.PostCapabilitiesIdInvitationsWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdInvitationsResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdInvitationsWithResponse(ctx context.Context, id string, body PostCapabilitiesIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdInvitationsResponse, error) {
	rsp, err := c.PostCapabilitiesIdInvitations(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdInvitationsResponse(rsp)
}

// PostCapabilitiesIdJoinWithResponse request returning *PostCapabilitiesIdJoinResponse
func (c *ClientWithResponses) PostCapabilitiesIdJoinWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdJoinResponse, error) {
	rsp, err := c.PostCapabilitiesIdJoin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdJoinResponse(rsp)
}

// GetCapabilitiesIdKafkaclusteraccessWithResponse request returning *GetCapabilitiesIdKafkaclusteraccessResponse
func (c *ClientWithResponses) GetCapabilitiesIdKafkaclusteraccessWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdKafkaclusteraccessResponse, error) {
	rsp, err := c.GetCapabilitiesIdKafkaclusteraccess(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdKafkaclusteraccessResponse(rsp)
}

// GetCapabilitiesIdKafkaclusteraccessClusterIdWithResponse request returning *GetCapabilitiesIdKafkaclusteraccessClusterIdResponse
func (c *ClientWithResponses) GetCapabilitiesIdKafkaclusteraccessClusterIdWithResponse(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdKafkaclusteraccessClusterIdResponse, error) {
	rsp, err := c.GetCapabilitiesIdKafkaclusteraccessClusterId(ctx, id, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdKafkaclusteraccessClusterIdResponse(rsp)
}

// PostCapabilitiesIdKafkaclusteraccessClusterIdWithResponse request returning *PostCapabilitiesIdKafkaclusteraccessClusterIdResponse
func (c *ClientWithResponses) PostCapabilitiesIdKafkaclusteraccessClusterIdWithResponse(ctx context.Context, id string, clusterId string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdKafkaclusteraccessClusterIdResponse, error) {
	rsp, err := c.PostCapabilitiesIdKafkaclusteraccessClusterId(ctx, id, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdKafkaclusteraccessClusterIdResponse(rsp)
}

// PostCapabilitiesIdLeaveWithResponse request returning *PostCapabilitiesIdLeaveResponse
func (c *ClientWithResponses) PostCapabilitiesIdLeaveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdLeaveResponse, error) {
	rsp, err := c.PostCapabilitiesIdLeave(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdLeaveResponse(rsp)
}

// GetCapabilitiesIdMembersWithResponse request returning *GetCapabilitiesIdMembersResponse
func (c *ClientWithResponses) GetCapabilitiesIdMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMembersResponse, error) {
	rsp, err := c.GetCapabilitiesIdMembers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdMembersResponse(rsp)
}

// GetCapabilitiesIdMembershipapplicationsWithResponse request returning *GetCapabilitiesIdMembershipapplicationsResponse
func (c *ClientWithResponses) GetCapabilitiesIdMembershipapplicationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMembershipapplicationsResponse, error) {
	rsp, err := c.GetCapabilitiesIdMembershipapplications(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdMembershipapplicationsResponse(rsp)
}

// PostCapabilitiesIdMembershipapplicationsWithResponse request returning *PostCapabilitiesIdMembershipapplicationsResponse
func (c *ClientWithResponses) PostCapabilitiesIdMembershipapplicationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMembershipapplicationsResponse, error) {
	rsp, err := c.PostCapabilitiesIdMembershipapplications(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdMembershipapplicationsResponse(rsp)
}

// GetCapabilitiesIdMetadataWithResponse request returning *GetCapabilitiesIdMetadataResponse
func (c *ClientWithResponses) GetCapabilitiesIdMetadataWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdMetadataResponse, error) {
	rsp, err := c.GetCapabilitiesIdMetadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdMetadataResponse(rsp)
}

// PostCapabilitiesIdMetadataWithBodyWithResponse request with arbitrary body returning *PostCapabilitiesIdMetadataResponse
func (c *ClientWithResponses) PostCapabilitiesIdMetadataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdMetadataWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdMetadataResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdMetadataWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdMetadataWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdMetadataResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdMetadataWithResponse(ctx context.Context, id string, body PostCapabilitiesIdMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdMetadata(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdMetadataResponse(rsp)
}

// PostCapabilitiesIdRequestdeletionWithResponse request returning *PostCapabilitiesIdRequestdeletionResponse
func (c *ClientWithResponses) PostCapabilitiesIdRequestdeletionWithResponse(ctx context.Context, id string, params *PostCapabilitiesIdRequestdeletionParams, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequestdeletionResponse, error) {
	rsp, err := c.PostCapabilitiesIdRequestdeletion(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdRequestdeletionResponse(rsp)
}

// PostCapabilitiesIdRequiredMetadataWithBodyWithResponse request with arbitrary body returning *PostCapabilitiesIdRequiredMetadataResponse
func (c *ClientWithResponses) PostCapabilitiesIdRequiredMetadataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdRequiredMetadataWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdRequiredMetadataResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdRequiredMetadataWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdRequiredMetadataWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdRequiredMetadataResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdRequiredMetadataWithResponse(ctx context.Context, id string, body PostCapabilitiesIdRequiredMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdRequiredMetadataResponse, error) {
	rsp, err := c.PostCapabilitiesIdRequiredMetadata(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdRequiredMetadataResponse(rsp)
}

// GetCapabilitiesIdTeamsWithResponse request returning *GetCapabilitiesIdTeamsResponse
func (c *ClientWithResponses) GetCapabilitiesIdTeamsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCapabilitiesIdTeamsResponse, error) {
	rsp, err := c.GetCapabilitiesIdTeams(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilitiesIdTeamsResponse(rsp)
}

// PostCapabilitiesIdTopicsWithBodyWithResponse request with arbitrary body returning *PostCapabilitiesIdTopicsResponse
func (c *ClientWithResponses) PostCapabilitiesIdTopicsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error) {
	rsp, err := c.PostCapabilitiesIdTopicsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdTopicsResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdTopicsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostCapabilitiesIdTopicsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error) {
	rsp, err := c.PostCapabilitiesIdTopicsWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdTopicsResponse(rsp)
}

func (c *ClientWithResponses) PostCapabilitiesIdTopicsWithResponse(ctx context.Context, id string, body PostCapabilitiesIdTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCapabilitiesIdTopicsResponse, error) {
	rsp, err := c.PostCapabilitiesIdTopics(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCapabilitiesIdTopicsResponse(rsp)
}

// GetEcrRepositoriesWithResponse request returning *GetEcrRepositoriesResponse
func (c *ClientWithResponses) GetEcrRepositoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEcrRepositoriesResponse, error) {
	rsp, err := c.GetEcrRepositories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEcrRepositoriesResponse(rsp)
}

// PostEcrRepositoriesWithBodyWithResponse request with arbitrary body returning *PostEcrRepositoriesResponse
func (c *ClientWithResponses) PostEcrRepositoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error) {
	rsp, err := c.PostEcrRepositoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEcrRepositoriesResponse(rsp)
}

func (c *ClientWithResponses) PostEcrRepositoriesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostEcrRepositoriesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error) {
	rsp, err := c.PostEcrRepositoriesWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEcrRepositoriesResponse(rsp)
}

func (c *ClientWithResponses) PostEcrRepositoriesWithResponse(ctx context.Context, body PostEcrRepositoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEcrRepositoriesResponse, error) {
	rsp, err := c.PostEcrRepositories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEcrRepositoriesResponse(rsp)
}

// PostEcrSynchronizeWithResponse request returning *PostEcrSynchronizeResponse
func (c *ClientWithResponses) PostEcrSynchronizeWithResponse(ctx context.Context, params *PostEcrSynchronizeParams, reqEditors ...RequestEditorFn) (*PostEcrSynchronizeResponse, error) {
	rsp, err := c.PostEcrSynchronize(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEcrSynchronizeResponse(rsp)
}

// GetInvitationsWithResponse request returning *GetInvitationsResponse
func (c *ClientWithResponses) GetInvitationsWithResponse(ctx context.Context, params *GetInvitationsParams, reqEditors ...RequestEditorFn) (*GetInvitationsResponse, error) {
	rsp, err := c.GetInvitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitationsResponse(rsp)
}

// GetInvitationsIdWithResponse request returning *GetInvitationsIdResponse
func (c *ClientWithResponses) GetInvitationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInvitationsIdResponse, error) {
	rsp, err := c.GetInvitationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitationsIdResponse(rsp)
}

// PostInvitationsIdAcceptWithResponse request returning *PostInvitationsIdAcceptResponse
func (c *ClientWithResponses) PostInvitationsIdAcceptWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostInvitationsIdAcceptResponse, error) {
	rsp, err := c.PostInvitationsIdAccept(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitationsIdAcceptResponse(rsp)
}

// PostInvitationsIdDeclineWithResponse request returning *PostInvitationsIdDeclineResponse
func (c *ClientWithResponses) PostInvitationsIdDeclineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostInvitationsIdDeclineResponse, error) {
	rsp, err := c.PostInvitationsIdDecline(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitationsIdDeclineResponse(rsp)
}

// PostJsonSchemaValidateWithBodyWithResponse request with arbitrary body returning *PostJsonSchemaValidateResponse
func (c *ClientWithResponses) PostJsonSchemaValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error) {
	rsp, err := c.PostJsonSchemaValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaValidateResponse(rsp)
}

func (c *ClientWithResponses) PostJsonSchemaValidateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostJsonSchemaValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error) {
	rsp, err := c.PostJsonSchemaValidateWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaValidateResponse(rsp)
}

func (c *ClientWithResponses) PostJsonSchemaValidateWithResponse(ctx context.Context, body PostJsonSchemaValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaValidateResponse, error) {
	rsp, err := c.PostJsonSchemaValidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaValidateResponse(rsp)
}

// GetJsonSchemaIdWithResponse request returning *GetJsonSchemaIdResponse
func (c *ClientWithResponses) GetJsonSchemaIdWithResponse(ctx context.Context, id string, params *GetJsonSchemaIdParams, reqEditors ...RequestEditorFn) (*GetJsonSchemaIdResponse, error) {
	rsp, err := c.GetJsonSchemaId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJsonSchemaIdResponse(rsp)
}

// PostJsonSchemaIdWithBodyWithResponse request with arbitrary body returning *PostJsonSchemaIdResponse
func (c *ClientWithResponses) PostJsonSchemaIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error) {
	rsp, err := c.PostJsonSchemaIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaIdResponse(rsp)
}

func (c *ClientWithResponses) PostJsonSchemaIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostJsonSchemaIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error) {
	rsp, err := c.PostJsonSchemaIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaIdResponse(rsp)
}

func (c *ClientWithResponses) PostJsonSchemaIdWithResponse(ctx context.Context, id string, body PostJsonSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJsonSchemaIdResponse, error) {
	rsp, err := c.PostJsonSchemaId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJsonSchemaIdResponse(rsp)
}

// GetKafkaclustersWithResponse request returning *GetKafkaclustersResponse
func (c *ClientWithResponses) GetKafkaclustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKafkaclustersResponse, error) {
	rsp, err := c.GetKafkaclusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkaclustersResponse(rsp)
}

// GetKafkaclustersIdWithResponse request returning *GetKafkaclustersIdResponse
func (c *ClientWithResponses) GetKafkaclustersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkaclustersIdResponse, error) {
	rsp, err := c.GetKafkaclustersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkaclustersIdResponse(rsp)
}

// GetKafkatopicsWithResponse request returning *GetKafkatopicsResponse
func (c *ClientWithResponses) GetKafkatopicsWithResponse(ctx context.Context, params *GetKafkatopicsParams, reqEditors ...RequestEditorFn) (*GetKafkatopicsResponse, error) {
	rsp, err := c.GetKafkatopics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkatopicsResponse(rsp)
}

// DeleteKafkatopicsIdWithResponse request returning *DeleteKafkatopicsIdResponse
func (c *ClientWithResponses) DeleteKafkatopicsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteKafkatopicsIdResponse, error) {
	rsp, err := c.DeleteKafkatopicsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKafkatopicsIdResponse(rsp)
}

// GetKafkatopicsIdWithResponse request returning *GetKafkatopicsIdResponse
func (c *ClientWithResponses) GetKafkatopicsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdResponse, error) {
	rsp, err := c.GetKafkatopicsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkatopicsIdResponse(rsp)
}

// GetKafkatopicsIdConsumersWithResponse request returning *GetKafkatopicsIdConsumersResponse
func (c *ClientWithResponses) GetKafkatopicsIdConsumersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdConsumersResponse, error) {
	rsp, err := c.GetKafkatopicsIdConsumers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkatopicsIdConsumersResponse(rsp)
}

// PutKafkatopicsIdDescriptionWithBodyWithResponse request with arbitrary body returning *PutKafkatopicsIdDescriptionResponse
func (c *ClientWithResponses) PutKafkatopicsIdDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error) {
	rsp, err := c.PutKafkatopicsIdDescriptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKafkatopicsIdDescriptionResponse(rsp)
}

func (c *ClientWithResponses) PutKafkatopicsIdDescriptionWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutKafkatopicsIdDescriptionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error) {
	rsp, err := c.PutKafkatopicsIdDescriptionWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKafkatopicsIdDescriptionResponse(rsp)
}

func (c *ClientWithResponses) PutKafkatopicsIdDescriptionWithResponse(ctx context.Context, id string, body PutKafkatopicsIdDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKafkatopicsIdDescriptionResponse, error) {
	rsp, err := c.PutKafkatopicsIdDescription(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKafkatopicsIdDescriptionResponse(rsp)
}

// GetKafkatopicsIdMessagecontractsWithResponse request returning *GetKafkatopicsIdMessagecontractsResponse
func (c *ClientWithResponses) GetKafkatopicsIdMessagecontractsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdMessagecontractsResponse, error) {
	rsp, err := c.GetKafkatopicsIdMessagecontracts(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkatopicsIdMessagecontractsResponse(rsp)
}

// PostKafkatopicsIdMessagecontractsWithBodyWithResponse request with arbitrary body returning *PostKafkatopicsIdMessagecontractsResponse
func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsResponse(rsp)
}

func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsResponse(rsp)
}

func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontracts(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsResponse(rsp)
}

// PostKafkatopicsIdMessagecontractsValidateWithBodyWithResponse request with arbitrary body returning *PostKafkatopicsIdMessagecontractsValidateResponse
func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsValidateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsValidateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsValidateResponse(rsp)
}

func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsValidateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsValidateWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsValidateResponse(rsp)
}

func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsValidateWithResponse(ctx context.Context, id string, body PostKafkatopicsIdMessagecontractsValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsValidateResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsValidate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsValidateResponse(rsp)
}

// GetKafkatopicsIdMessagecontractsContractIdWithResponse request returning *GetKafkatopicsIdMessagecontractsContractIdResponse
func (c *ClientWithResponses) GetKafkatopicsIdMessagecontractsContractIdWithResponse(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*GetKafkatopicsIdMessagecontractsContractIdResponse, error) {
	rsp, err := c.GetKafkatopicsIdMessagecontractsContractId(ctx, id, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKafkatopicsIdMessagecontractsContractIdResponse(rsp)
}

// PostKafkatopicsIdMessagecontractsContractIdRetryWithResponse request returning *PostKafkatopicsIdMessagecontractsContractIdRetryResponse
func (c *ClientWithResponses) PostKafkatopicsIdMessagecontractsContractIdRetryWithResponse(ctx context.Context, id string, contractId string, reqEditors ...RequestEditorFn) (*PostKafkatopicsIdMessagecontractsContractIdRetryResponse, error) {
	rsp, err := c.PostKafkatopicsIdMessagecontractsContractIdRetry(ctx, id, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKafkatopicsIdMessagecontractsContractIdRetryResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// PutMePersonalinformationWithBodyWithResponse request with arbitrary body returning *PutMePersonalinformationResponse
func (c *ClientWithResponses) PutMePersonalinformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error) {
	rsp, err := c.PutMePersonalinformationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMePersonalinformationResponse(rsp)
}

func (c *ClientWithResponses) PutMePersonalinformationWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutMePersonalinformationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error) {
	rsp, err := c.PutMePersonalinformationWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMePersonalinformationResponse(rsp)
}

func (c *ClientWithResponses) PutMePersonalinformationWithResponse(ctx context.Context, body PutMePersonalinformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMePersonalinformationResponse, error) {
	rsp, err := c.PutMePersonalinformation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMePersonalinformationResponse(rsp)
}

// GetMembershipapplicationsIdWithResponse request returning *GetMembershipapplicationsIdResponse
func (c *ClientWithResponses) GetMembershipapplicationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMembershipapplicationsIdResponse, error) {
	rsp, err := c.GetMembershipapplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembershipapplicationsIdResponse(rsp)
}

// GetMembershipapplicationsIdApprovalsWithResponse request returning *GetMembershipapplicationsIdApprovalsResponse
func (c *ClientWithResponses) GetMembershipapplicationsIdApprovalsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMembershipapplicationsIdApprovalsResponse, error) {
	rsp, err := c.GetMembershipapplicationsIdApprovals(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembershipapplicationsIdApprovalsResponse(rsp)
}

// PostMembershipapplicationsIdApprovalsWithResponse request returning *PostMembershipapplicationsIdApprovalsResponse
func (c *ClientWithResponses) PostMembershipapplicationsIdApprovalsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostMembershipapplicationsIdApprovalsResponse, error) {
	rsp, err := c.PostMembershipapplicationsIdApprovals(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMembershipapplicationsIdApprovalsResponse(rsp)
}

// GetMetricsMyCapabilitiesCostsWithResponse request returning *GetMetricsMyCapabilitiesCostsResponse
func (c *ClientWithResponses) GetMetricsMyCapabilitiesCostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsMyCapabilitiesCostsResponse, error) {
	rsp, err := c.GetMetricsMyCapabilitiesCosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsMyCapabilitiesCostsResponse(rsp)
}

// GetMetricsMyCapabilitiesResourcesWithResponse request returning *GetMetricsMyCapabilitiesResourcesResponse
func (c *ClientWithResponses) GetMetricsMyCapabilitiesResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsMyCapabilitiesResourcesResponse, error) {
	rsp, err := c.GetMetricsMyCapabilitiesResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsMyCapabilitiesResourcesResponse(rsp)
}

// GetMetricsOutOfSyncEcrReposWithResponse request returning *GetMetricsOutOfSyncEcrReposResponse
func (c *ClientWithResponses) GetMetricsOutOfSyncEcrReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsOutOfSyncEcrReposResponse, error) {
	rsp, err := c.GetMetricsOutOfSyncEcrRepos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsOutOfSyncEcrReposResponse(rsp)
}

// PostPortalvisitsWithResponse request returning *PostPortalvisitsResponse
func (c *ClientWithResponses) PostPortalvisitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPortalvisitsResponse, error) {
	rsp, err := c.PostPortalvisits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPortalvisitsResponse(rsp)
}

// GetStatsWithResponse request returning *GetStatsResponse
func (c *ClientWithResponses) GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error) {
	rsp, err := c.GetStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsResponse(rsp)
}

// GetSystemLegacyAadAwsSyncWithResponse request returning *GetSystemLegacyAadAwsSyncResponse
func (c *ClientWithResponses) GetSystemLegacyAadAwsSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemLegacyAadAwsSyncResponse, error) {
	rsp, err := c.GetSystemLegacyAadAwsSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemLegacyAadAwsSyncResponse(rsp)
}

// GetSystemStatsTopvisitorsWithResponse request returning *GetSystemStatsTopvisitorsResponse
func (c *ClientWithResponses) GetSystemStatsTopvisitorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStatsTopvisitorsResponse, error) {
	rsp, err := c.GetSystemStatsTopvisitors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemStatsTopvisitorsResponse(rsp)
}

// GetTeamsWithResponse request returning *GetTeamsResponse
func (c *ClientWithResponses) GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error) {
	rsp, err := c.GetTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsResponse(rsp)
}

// PostTeamsWithBodyWithResponse request with arbitrary body returning *PostTeamsResponse
func (c *ClientWithResponses) PostTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error) {
	rsp, err := c.PostTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTeamsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error) {
	rsp, err := c.PostTeamsWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostTeamsWithResponse(ctx context.Context, body PostTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTeamsResponse, error) {
	rsp, err := c.PostTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsResponse(rsp)
}

// DeleteTeamsIdWithResponse request returning *DeleteTeamsIdResponse
func (c *ClientWithResponses) DeleteTeamsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamsIdResponse, error) {
	rsp, err := c.DeleteTeamsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamsIdResponse(rsp)
}

// GetTeamsIdWithResponse request returning *GetTeamsIdResponse
func (c *ClientWithResponses) GetTeamsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdResponse, error) {
	rsp, err := c.GetTeamsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsIdResponse(rsp)
}

// GetTeamsIdCapabilityLinksWithResponse request returning *GetTeamsIdCapabilityLinksResponse
func (c *ClientWithResponses) GetTeamsIdCapabilityLinksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdCapabilityLinksResponse, error) {
	rsp, err := c.GetTeamsIdCapabilityLinks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsIdCapabilityLinksResponse(rsp)
}

// DeleteTeamsIdCapabilityLinksCapabilityIdWithResponse request returning *DeleteTeamsIdCapabilityLinksCapabilityIdResponse
func (c *ClientWithResponses) DeleteTeamsIdCapabilityLinksCapabilityIdWithResponse(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*DeleteTeamsIdCapabilityLinksCapabilityIdResponse, error) {
	rsp, err := c.DeleteTeamsIdCapabilityLinksCapabilityId(ctx, id, capabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamsIdCapabilityLinksCapabilityIdResponse(rsp)
}

// PostTeamsIdCapabilityLinksCapabilityIdWithResponse request returning *PostTeamsIdCapabilityLinksCapabilityIdResponse
func (c *ClientWithResponses) PostTeamsIdCapabilityLinksCapabilityIdWithResponse(ctx context.Context, id string, capabilityId string, reqEditors ...RequestEditorFn) (*PostTeamsIdCapabilityLinksCapabilityIdResponse, error) {
	rsp, err := c.PostTeamsIdCapabilityLinksCapabilityId(ctx, id, capabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamsIdCapabilityLinksCapabilityIdResponse(rsp)
}

// GetTeamsIdMembersWithResponse request returning *GetTeamsIdMembersResponse
func (c *ClientWithResponses) GetTeamsIdMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamsIdMembersResponse, error) {
	rsp, err := c.GetTeamsIdMembers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsIdMembersResponse(rsp)
}

// ParseGetApispecsResponse parses an HTTP response from a GetApispecsWithResponse call
func ParseGetApispecsResponse(rsp *http.Response) (*GetApispecsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApispecsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApispecsIdResponse parses an HTTP response from a GetApispecsIdWithResponse call
func ParseGetApispecsIdResponse(rsp *http.Response) (*GetApispecsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApispecsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesResponse parses an HTTP response from a GetCapabilitiesWithResponse call
func ParseGetCapabilitiesResponse(rsp *http.Response) (*GetCapabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CapabilityListApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCapabilitiesResponse parses an HTTP response from a PostCapabilitiesWithResponse call
func ParsePostCapabilitiesResponse(rsp *http.Response) (*PostCapabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CapabilityDetailsApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCapabilitiesIdResponse parses an HTTP response from a GetCapabilitiesIdWithResponse call
func ParseGetCapabilitiesIdResponse(rsp *http.Response) (*GetCapabilitiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CapabilityDetailsApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCapabilitiesIdAwsaccountResponse parses an HTTP response from a GetCapabilitiesIdAwsaccountWithResponse call
func ParseGetCapabilitiesIdAwsaccountResponse(rsp *http.Response) (*GetCapabilitiesIdAwsaccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdAwsaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AwsAccountApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCapabilitiesIdAwsaccountResponse parses an HTTP response from a PostCapabilitiesIdAwsaccountWithResponse call
func ParsePostCapabilitiesIdAwsaccountResponse(rsp *http.Response) (*PostCapabilitiesIdAwsaccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdAwsaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AwsAccountApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCapabilitiesIdCanceldeletionrequestResponse parses an HTTP response from a PostCapabilitiesIdCanceldeletionrequestWithResponse call
func ParsePostCapabilitiesIdCanceldeletionrequestResponse(rsp *http.Response) (*PostCapabilitiesIdCanceldeletionrequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdCanceldeletionrequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesIdConfigurationlevelResponse parses an HTTP response from a GetCapabilitiesIdConfigurationlevelWithResponse call
func ParseGetCapabilitiesIdConfigurationlevelResponse(rsp *http.Response) (*GetCapabilitiesIdConfigurationlevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdConfigurationlevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdInvitationsResponse parses an HTTP response from a PostCapabilitiesIdInvitationsWithResponse call
func ParsePostCapabilitiesIdInvitationsResponse(rsp *http.Response) (*PostCapabilitiesIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CapabilityDetailsApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCapabilitiesIdJoinResponse parses an HTTP response from a PostCapabilitiesIdJoinWithResponse call
func ParsePostCapabilitiesIdJoinResponse(rsp *http.Response) (*PostCapabilitiesIdJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesIdKafkaclusteraccessResponse parses an HTTP response from a GetCapabilitiesIdKafkaclusteraccessWithResponse call
func ParseGetCapabilitiesIdKafkaclusteraccessResponse(rsp *http.Response) (*GetCapabilitiesIdKafkaclusteraccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdKafkaclusteraccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesIdKafkaclusteraccessClusterIdResponse parses an HTTP response from a GetCapabilitiesIdKafkaclusteraccessClusterIdWithResponse call
func ParseGetCapabilitiesIdKafkaclusteraccessClusterIdResponse(rsp *http.Response) (*GetCapabilitiesIdKafkaclusteraccessClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdKafkaclusteraccessClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdKafkaclusteraccessClusterIdResponse parses an HTTP response from a PostCapabilitiesIdKafkaclusteraccessClusterIdWithResponse call
func ParsePostCapabilitiesIdKafkaclusteraccessClusterIdResponse(rsp *http.Response) (*PostCapabilitiesIdKafkaclusteraccessClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdKafkaclusteraccessClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdLeaveResponse parses an HTTP response from a PostCapabilitiesIdLeaveWithResponse call
func ParsePostCapabilitiesIdLeaveResponse(rsp *http.Response) (*PostCapabilitiesIdLeaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesIdMembersResponse parses an HTTP response from a GetCapabilitiesIdMembersWithResponse call
func ParseGetCapabilitiesIdMembersResponse(rsp *http.Response) (*GetCapabilitiesIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CapabilityMembersApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCapabilitiesIdMembershipapplicationsResponse parses an HTTP response from a GetCapabilitiesIdMembershipapplicationsWithResponse call
func ParseGetCapabilitiesIdMembershipapplicationsResponse(rsp *http.Response) (*GetCapabilitiesIdMembershipapplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdMembershipapplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipApplicationListApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCapabilitiesIdMembershipapplicationsResponse parses an HTTP response from a PostCapabilitiesIdMembershipapplicationsWithResponse call
func ParsePostCapabilitiesIdMembershipapplicationsResponse(rsp *http.Response) (*PostCapabilitiesIdMembershipapplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdMembershipapplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MembershipApplicationApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCapabilitiesIdMetadataResponse parses an HTTP response from a GetCapabilitiesIdMetadataWithResponse call
func ParseGetCapabilitiesIdMetadataResponse(rsp *http.Response) (*GetCapabilitiesIdMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdMetadataResponse parses an HTTP response from a PostCapabilitiesIdMetadataWithResponse call
func ParsePostCapabilitiesIdMetadataResponse(rsp *http.Response) (*PostCapabilitiesIdMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdRequestdeletionResponse parses an HTTP response from a PostCapabilitiesIdRequestdeletionWithResponse call
func ParsePostCapabilitiesIdRequestdeletionResponse(rsp *http.Response) (*PostCapabilitiesIdRequestdeletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdRequestdeletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdRequiredMetadataResponse parses an HTTP response from a PostCapabilitiesIdRequiredMetadataWithResponse call
func ParsePostCapabilitiesIdRequiredMetadataResponse(rsp *http.Response) (*PostCapabilitiesIdRequiredMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdRequiredMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCapabilitiesIdTeamsResponse parses an HTTP response from a GetCapabilitiesIdTeamsWithResponse call
func ParseGetCapabilitiesIdTeamsResponse(rsp *http.Response) (*GetCapabilitiesIdTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilitiesIdTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCapabilitiesIdTopicsResponse parses an HTTP response from a PostCapabilitiesIdTopicsWithResponse call
func ParsePostCapabilitiesIdTopicsResponse(rsp *http.Response) (*PostCapabilitiesIdTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCapabilitiesIdTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetEcrRepositoriesResponse parses an HTTP response from a GetEcrRepositoriesWithResponse call
func ParseGetEcrRepositoriesResponse(rsp *http.Response) (*GetEcrRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEcrRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ECRRepository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEcrRepositoriesResponse parses an HTTP response from a PostEcrRepositoriesWithResponse call
func ParsePostEcrRepositoriesResponse(rsp *http.Response) (*PostEcrRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEcrRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ECRRepository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEcrSynchronizeResponse parses an HTTP response from a PostEcrSynchronizeWithResponse call
func ParsePostEcrSynchronizeResponse(rsp *http.Response) (*PostEcrSynchronizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEcrSynchronizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInvitationsResponse parses an HTTP response from a GetInvitationsWithResponse call
func ParseGetInvitationsResponse(rsp *http.Response) (*GetInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInvitationsIdResponse parses an HTTP response from a GetInvitationsIdWithResponse call
func ParseGetInvitationsIdResponse(rsp *http.Response) (*GetInvitationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvitationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInvitationsIdAcceptResponse parses an HTTP response from a PostInvitationsIdAcceptWithResponse call
func ParsePostInvitationsIdAcceptResponse(rsp *http.Response) (*PostInvitationsIdAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitationsIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInvitationsIdDeclineResponse parses an HTTP response from a PostInvitationsIdDeclineWithResponse call
func ParsePostInvitationsIdDeclineResponse(rsp *http.Response) (*PostInvitationsIdDeclineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitationsIdDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJsonSchemaValidateResponse parses an HTTP response from a PostJsonSchemaValidateWithResponse call
func ParsePostJsonSchemaValidateResponse(rsp *http.Response) (*PostJsonSchemaValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJsonSchemaValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJsonSchemaIdResponse parses an HTTP response from a GetJsonSchemaIdWithResponse call
func ParseGetJsonSchemaIdResponse(rsp *http.Response) (*GetJsonSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJsonSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJsonSchemaIdResponse parses an HTTP response from a PostJsonSchemaIdWithResponse call
func ParsePostJsonSchemaIdResponse(rsp *http.Response) (*PostJsonSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJsonSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKafkaclustersResponse parses an HTTP response from a GetKafkaclustersWithResponse call
func ParseGetKafkaclustersResponse(rsp *http.Response) (*GetKafkaclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkaclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKafkaclustersIdResponse parses an HTTP response from a GetKafkaclustersIdWithResponse call
func ParseGetKafkaclustersIdResponse(rsp *http.Response) (*GetKafkaclustersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkaclustersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKafkatopicsResponse parses an HTTP response from a GetKafkatopicsWithResponse call
func ParseGetKafkatopicsResponse(rsp *http.Response) (*GetKafkatopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkatopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicListApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteKafkatopicsIdResponse parses an HTTP response from a DeleteKafkatopicsIdWithResponse call
func ParseDeleteKafkatopicsIdResponse(rsp *http.Response) (*DeleteKafkatopicsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKafkatopicsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case rsp.StatusCode == 204:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetKafkatopicsIdResponse parses an HTTP response from a GetKafkatopicsIdWithResponse call
func ParseGetKafkatopicsIdResponse(rsp *http.Response) (*GetKafkatopicsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkatopicsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetKafkatopicsIdConsumersResponse parses an HTTP response from a GetKafkatopicsIdConsumersWithResponse call
func ParseGetKafkatopicsIdConsumersResponse(rsp *http.Response) (*GetKafkatopicsIdConsumersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkatopicsIdConsumersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutKafkatopicsIdDescriptionResponse parses an HTTP response from a PutKafkatopicsIdDescriptionWithResponse call
func ParsePutKafkatopicsIdDescriptionResponse(rsp *http.Response) (*PutKafkatopicsIdDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKafkatopicsIdDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case rsp.StatusCode == 204:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetKafkatopicsIdMessagecontractsResponse parses an HTTP response from a GetKafkatopicsIdMessagecontractsWithResponse call
func ParseGetKafkatopicsIdMessagecontractsResponse(rsp *http.Response) (*GetKafkatopicsIdMessagecontractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkatopicsIdMessagecontractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostKafkatopicsIdMessagecontractsResponse parses an HTTP response from a PostKafkatopicsIdMessagecontractsWithResponse call
func ParsePostKafkatopicsIdMessagecontractsResponse(rsp *http.Response) (*PostKafkatopicsIdMessagecontractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKafkatopicsIdMessagecontractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostKafkatopicsIdMessagecontractsValidateResponse parses an HTTP response from a PostKafkatopicsIdMessagecontractsValidateWithResponse call
func ParsePostKafkatopicsIdMessagecontractsValidateResponse(rsp *http.Response) (*PostKafkatopicsIdMessagecontractsValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKafkatopicsIdMessagecontractsValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetKafkatopicsIdMessagecontractsContractIdResponse parses an HTTP response from a GetKafkatopicsIdMessagecontractsContractIdWithResponse call
func ParseGetKafkatopicsIdMessagecontractsContractIdResponse(rsp *http.Response) (*GetKafkatopicsIdMessagecontractsContractIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKafkatopicsIdMessagecontractsContractIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKafkatopicsIdMessagecontractsContractIdRetryResponse parses an HTTP response from a PostKafkatopicsIdMessagecontractsContractIdRetryWithResponse call
func ParsePostKafkatopicsIdMessagecontractsContractIdRetryResponse(rsp *http.Response) (*PostKafkatopicsIdMessagecontractsContractIdRetryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKafkatopicsIdMessagecontractsContractIdRetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KafkaTopicApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutMePersonalinformationResponse parses an HTTP response from a PutMePersonalinformationWithResponse call
func ParsePutMePersonalinformationResponse(rsp *http.Response) (*PutMePersonalinformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMePersonalinformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMembershipapplicationsIdResponse parses an HTTP response from a GetMembershipapplicationsIdWithResponse call
func ParseGetMembershipapplicationsIdResponse(rsp *http.Response) (*GetMembershipapplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembershipapplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipApplicationApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMembershipapplicationsIdApprovalsResponse parses an HTTP response from a GetMembershipapplicationsIdApprovalsWithResponse call
func ParseGetMembershipapplicationsIdApprovalsResponse(rsp *http.Response) (*GetMembershipapplicationsIdApprovalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembershipapplicationsIdApprovalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipApprovalListApiResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMembershipapplicationsIdApprovalsResponse parses an HTTP response from a PostMembershipapplicationsIdApprovalsWithResponse call
func ParsePostMembershipapplicationsIdApprovalsResponse(rsp *http.Response) (*PostMembershipapplicationsIdApprovalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMembershipapplicationsIdApprovalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricsMyCapabilitiesCostsResponse parses an HTTP response from a GetMetricsMyCapabilitiesCostsWithResponse call
func ParseGetMetricsMyCapabilitiesCostsResponse(rsp *http.Response) (*GetMetricsMyCapabilitiesCostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsMyCapabilitiesCostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricsMyCapabilitiesResourcesResponse parses an HTTP response from a GetMetricsMyCapabilitiesResourcesWithResponse call
func ParseGetMetricsMyCapabilitiesResourcesResponse(rsp *http.Response) (*GetMetricsMyCapabilitiesResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsMyCapabilitiesResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricsOutOfSyncEcrReposResponse parses an HTTP response from a GetMetricsOutOfSyncEcrReposWithResponse call
func ParseGetMetricsOutOfSyncEcrReposResponse(rsp *http.Response) (*GetMetricsOutOfSyncEcrReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsOutOfSyncEcrReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPortalvisitsResponse parses an HTTP response from a PostPortalvisitsWithResponse call
func ParsePostPortalvisitsResponse(rsp *http.Response) (*PostPortalvisitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPortalvisitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatsResponse parses an HTTP response from a GetStatsWithResponse call
func ParseGetStatsResponse(rsp *http.Response) (*GetStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemLegacyAadAwsSyncResponse parses an HTTP response from a GetSystemLegacyAadAwsSyncWithResponse call
func ParseGetSystemLegacyAadAwsSyncResponse(rsp *http.Response) (*GetSystemLegacyAadAwsSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemLegacyAadAwsSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemStatsTopvisitorsResponse parses an HTTP response from a GetSystemStatsTopvisitorsWithResponse call
func ParseGetSystemStatsTopvisitorsResponse(rsp *http.Response) (*GetSystemStatsTopvisitorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemStatsTopvisitorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsResponse parses an HTTP response from a GetTeamsWithResponse call
func ParseGetTeamsResponse(rsp *http.Response) (*GetTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTeamsResponse parses an HTTP response from a PostTeamsWithResponse call
func ParsePostTeamsResponse(rsp *http.Response) (*PostTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamsIdResponse parses an HTTP response from a DeleteTeamsIdWithResponse call
func ParseDeleteTeamsIdResponse(rsp *http.Response) (*DeleteTeamsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsIdResponse parses an HTTP response from a GetTeamsIdWithResponse call
func ParseGetTeamsIdResponse(rsp *http.Response) (*GetTeamsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsIdCapabilityLinksResponse parses an HTTP response from a GetTeamsIdCapabilityLinksWithResponse call
func ParseGetTeamsIdCapabilityLinksResponse(rsp *http.Response) (*GetTeamsIdCapabilityLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsIdCapabilityLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamsIdCapabilityLinksCapabilityIdResponse parses an HTTP response from a DeleteTeamsIdCapabilityLinksCapabilityIdWithResponse call
func ParseDeleteTeamsIdCapabilityLinksCapabilityIdResponse(rsp *http.Response) (*DeleteTeamsIdCapabilityLinksCapabilityIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamsIdCapabilityLinksCapabilityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTeamsIdCapabilityLinksCapabilityIdResponse parses an HTTP response from a PostTeamsIdCapabilityLinksCapabilityIdWithResponse call
func ParsePostTeamsIdCapabilityLinksCapabilityIdResponse(rsp *http.Response) (*PostTeamsIdCapabilityLinksCapabilityIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamsIdCapabilityLinksCapabilityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsIdMembersResponse parses an HTTP response from a GetTeamsIdMembersWithResponse call
func ParseGetTeamsIdMembersResponse(rsp *http.Response) (*GetTeamsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
